
EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038f8  080038f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f8  080038f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08003970  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003970  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a948  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001801  00000000  00000000  0002a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000197d  00000000  00000000  0002d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd9a  00000000  00000000  0002ec6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068dee  00000000  00000000  0003aa07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a37f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002294  00000000  00000000  000a3848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003778 	.word	0x08003778

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003778 	.word	0x08003778

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <debugPrintln>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Global variables
//General purpose Function to send a char array over the UART and to automatically send a new line character after it
void debugPrintln(UART_HandleTypeDef *uart_handle, char _out[]) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart_handle, (uint8_t*) _out, strlen(_out), 60);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	0018      	movs	r0, r3
 8000252:	f7ff ff59 	bl	8000108 <strlen>
 8000256:	0003      	movs	r3, r0
 8000258:	b29a      	uxth	r2, r3
 800025a:	6839      	ldr	r1, [r7, #0]
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	233c      	movs	r3, #60	; 0x3c
 8000260:	f002 fa44 	bl	80026ec <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8000264:	210c      	movs	r1, #12
 8000266:	187b      	adds	r3, r7, r1
 8000268:	4a05      	ldr	r2, [pc, #20]	; (8000280 <debugPrintln+0x3c>)
 800026a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(uart_handle, (uint8_t*) newline, 2, 10);
 800026c:	1879      	adds	r1, r7, r1
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	230a      	movs	r3, #10
 8000272:	2202      	movs	r2, #2
 8000274:	f002 fa3a 	bl	80026ec <HAL_UART_Transmit>
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b004      	add	sp, #16
 800027e:	bd80      	pop	{r7, pc}
 8000280:	00000a0d 	.word	0x00000a0d

08000284 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	b09b      	sub	sp, #108	; 0x6c
 8000288:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800028a:	f000 fbcb 	bl	8000a24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800028e:	f000 f967 	bl	8000560 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000292:	f000 fa2d 	bl	80006f0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000296:	f000 f9fb 	bl	8000690 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800029a:	f000 f9b9 	bl	8000610 <MX_I2C1_Init>

	/* USER CODE BEGIN 2 */
	char str[60] = { 0 }; //Useful buffer for printing to UART
 800029e:	2308      	movs	r3, #8
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	3304      	adds	r3, #4
 80002a8:	2238      	movs	r2, #56	; 0x38
 80002aa:	2100      	movs	r1, #0
 80002ac:	0018      	movs	r0, r3
 80002ae:	f002 fdf1 	bl	8002e94 <memset>
	uint8_t I2CReturn = 0; //Status var to indicate if HAL_I2C operation has succeeded (1) or failed (0);
 80002b2:	2351      	movs	r3, #81	; 0x51
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
	uint8_t i, j, Loop = 0; //Loop counters
 80002ba:	2355      	movs	r3, #85	; 0x55
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
	//Setup variables for reading and writing
	uint16_t EEPROM_DEVICE_ADDR = 0x55 << 1; //Address of EEPROM device on I2C bus
 80002c2:	234e      	movs	r3, #78	; 0x4e
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	22aa      	movs	r2, #170	; 0xaa
 80002c8:	801a      	strh	r2, [r3, #0]
	uint16_t madd = 0x00; //Memory address variable containing a starting memory address for a location of memory in the EEPROM
 80002ca:	2352      	movs	r3, #82	; 0x52
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	2200      	movs	r2, #0
 80002d0:	801a      	strh	r2, [r3, #0]
	uint8_t Data = 0x10;//Data variable containing sStarting value to write to memory, could be any 8bit value
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	2210      	movs	r2, #16
 80002d6:	701a      	strb	r2, [r3, #0]
	uint8_t *sData = &Data;	//Pointer to sending Data variable
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t Result = 0x00;	//Variable to stored value read back from memory in
 80002dc:	1dbb      	adds	r3, r7, #6
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
	uint8_t *rData = &Result;	//Pointer to result data variable
 80002e2:	1dbb      	adds	r3, r7, #6
 80002e4:	647b      	str	r3, [r7, #68]	; 0x44
	/* Infinite loop */

	/* USER CODE BEGIN WHILE */

	//Say hello over UART
	debugPrintln(&huart2, "Hello, this is STMF0 Discovery board: ");
 80002e6:	4a92      	ldr	r2, [pc, #584]	; (8000530 <main+0x2ac>)
 80002e8:	4b92      	ldr	r3, [pc, #584]	; (8000534 <main+0x2b0>)
 80002ea:	0011      	movs	r1, r2
 80002ec:	0018      	movs	r0, r3
 80002ee:	f7ff ffa9 	bl	8000244 <debugPrintln>

	while (1) {

		//Print and increment a loop counter for visual tracking/debugging purposes only
		memset(str, 0, sizeof(str));	//Reset str to zeros
 80002f2:	2408      	movs	r4, #8
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	223c      	movs	r2, #60	; 0x3c
 80002f8:	2100      	movs	r1, #0
 80002fa:	0018      	movs	r0, r3
 80002fc:	f002 fdca 	bl	8002e94 <memset>
		sprintf(str, "\rLoop count %d\n", Loop);//Format string to include the loop counter variable
 8000300:	2555      	movs	r5, #85	; 0x55
 8000302:	197b      	adds	r3, r7, r5
 8000304:	781a      	ldrb	r2, [r3, #0]
 8000306:	498c      	ldr	r1, [pc, #560]	; (8000538 <main+0x2b4>)
 8000308:	193b      	adds	r3, r7, r4
 800030a:	0018      	movs	r0, r3
 800030c:	f002 fdca 	bl	8002ea4 <siprintf>
		debugPrintln(&huart2, str);
 8000310:	193a      	adds	r2, r7, r4
 8000312:	4b88      	ldr	r3, [pc, #544]	; (8000534 <main+0x2b0>)
 8000314:	0011      	movs	r1, r2
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff ff94 	bl	8000244 <debugPrintln>
		Loop = Loop + 1;
 800031c:	197b      	adds	r3, r7, r5
 800031e:	197a      	adds	r2, r7, r5
 8000320:	7812      	ldrb	r2, [r2, #0]
 8000322:	3201      	adds	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]

		//Write and read back 5 different values to 5 different memory locations
		for (i = 0; i < 5; i++) {
 8000326:	2357      	movs	r3, #87	; 0x57
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	e096      	b.n	800045e <main+0x1da>
			//WRITING
			memset(str, 0, sizeof(str));
 8000330:	2408      	movs	r4, #8
 8000332:	193b      	adds	r3, r7, r4
 8000334:	223c      	movs	r2, #60	; 0x3c
 8000336:	2100      	movs	r1, #0
 8000338:	0018      	movs	r0, r3
 800033a:	f002 fdab 	bl	8002e94 <memset>
			sprintf(str, "Writing 0x%X to EEPROM address 0x%X", Data, madd);
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	001a      	movs	r2, r3
 8000344:	2552      	movs	r5, #82	; 0x52
 8000346:	197b      	adds	r3, r7, r5
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	497c      	ldr	r1, [pc, #496]	; (800053c <main+0x2b8>)
 800034c:	1938      	adds	r0, r7, r4
 800034e:	f002 fda9 	bl	8002ea4 <siprintf>
			debugPrintln(&huart2, str);
 8000352:	193a      	adds	r2, r7, r4
 8000354:	4b77      	ldr	r3, [pc, #476]	; (8000534 <main+0x2b0>)
 8000356:	0011      	movs	r1, r2
 8000358:	0018      	movs	r0, r3
 800035a:	f7ff ff73 	bl	8000244 <debugPrintln>

			I2CReturn = HAL_I2C_Mem_Write(&hi2c1, EEPROM_DEVICE_ADDR, madd, 2,
 800035e:	2651      	movs	r6, #81	; 0x51
 8000360:	19bc      	adds	r4, r7, r6
 8000362:	197b      	adds	r3, r7, r5
 8000364:	881a      	ldrh	r2, [r3, #0]
 8000366:	234e      	movs	r3, #78	; 0x4e
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	8819      	ldrh	r1, [r3, #0]
 800036c:	4874      	ldr	r0, [pc, #464]	; (8000540 <main+0x2bc>)
 800036e:	2301      	movs	r3, #1
 8000370:	425b      	negs	r3, r3
 8000372:	9302      	str	r3, [sp, #8]
 8000374:	2301      	movs	r3, #1
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	2302      	movs	r3, #2
 800037e:	f000 fecb 	bl	8001118 <HAL_I2C_Mem_Write>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]
					sData, 1, HAL_MAX_DELAY);
			if (I2CReturn != HAL_OK) {
 8000386:	19bb      	adds	r3, r7, r6
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d005      	beq.n	800039a <main+0x116>
				debugPrintln(&huart2, "Write to address FAILED");
 800038e:	4a6d      	ldr	r2, [pc, #436]	; (8000544 <main+0x2c0>)
 8000390:	4b68      	ldr	r3, [pc, #416]	; (8000534 <main+0x2b0>)
 8000392:	0011      	movs	r1, r2
 8000394:	0018      	movs	r0, r3
 8000396:	f7ff ff55 	bl	8000244 <debugPrintln>
			}

			//READING
			memset(str, 0, sizeof(str));
 800039a:	2408      	movs	r4, #8
 800039c:	193b      	adds	r3, r7, r4
 800039e:	223c      	movs	r2, #60	; 0x3c
 80003a0:	2100      	movs	r1, #0
 80003a2:	0018      	movs	r0, r3
 80003a4:	f002 fd76 	bl	8002e94 <memset>
			sprintf(str, "Reading from EEPROM address 0x%X ", madd);
 80003a8:	2552      	movs	r5, #82	; 0x52
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	881a      	ldrh	r2, [r3, #0]
 80003ae:	4966      	ldr	r1, [pc, #408]	; (8000548 <main+0x2c4>)
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fd76 	bl	8002ea4 <siprintf>
			debugPrintln(&huart2, str);
 80003b8:	193a      	adds	r2, r7, r4
 80003ba:	4b5e      	ldr	r3, [pc, #376]	; (8000534 <main+0x2b0>)
 80003bc:	0011      	movs	r1, r2
 80003be:	0018      	movs	r0, r3
 80003c0:	f7ff ff40 	bl	8000244 <debugPrintln>

			I2CReturn = HAL_I2C_Mem_Read(&hi2c1, EEPROM_DEVICE_ADDR, madd, 2,
 80003c4:	2651      	movs	r6, #81	; 0x51
 80003c6:	19bc      	adds	r4, r7, r6
 80003c8:	197b      	adds	r3, r7, r5
 80003ca:	881a      	ldrh	r2, [r3, #0]
 80003cc:	234e      	movs	r3, #78	; 0x4e
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	8819      	ldrh	r1, [r3, #0]
 80003d2:	485b      	ldr	r0, [pc, #364]	; (8000540 <main+0x2bc>)
 80003d4:	2301      	movs	r3, #1
 80003d6:	425b      	negs	r3, r3
 80003d8:	9302      	str	r3, [sp, #8]
 80003da:	2301      	movs	r3, #1
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	2302      	movs	r3, #2
 80003e4:	f000 ffc6 	bl	8001374 <HAL_I2C_Mem_Read>
 80003e8:	0003      	movs	r3, r0
 80003ea:	7023      	strb	r3, [r4, #0]
					rData, 1, HAL_MAX_DELAY);
			if (I2CReturn != HAL_OK) {
 80003ec:	19bb      	adds	r3, r7, r6
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d005      	beq.n	8000400 <main+0x17c>
				debugPrintln(&huart2, "Read from address FAILED");
 80003f4:	4a55      	ldr	r2, [pc, #340]	; (800054c <main+0x2c8>)
 80003f6:	4b4f      	ldr	r3, [pc, #316]	; (8000534 <main+0x2b0>)
 80003f8:	0011      	movs	r1, r2
 80003fa:	0018      	movs	r0, r3
 80003fc:	f7ff ff22 	bl	8000244 <debugPrintln>
			}

			//PRINT READ VALUE
			memset(str, 0, sizeof(str));
 8000400:	2408      	movs	r4, #8
 8000402:	193b      	adds	r3, r7, r4
 8000404:	223c      	movs	r2, #60	; 0x3c
 8000406:	2100      	movs	r1, #0
 8000408:	0018      	movs	r0, r3
 800040a:	f002 fd43 	bl	8002e94 <memset>
			sprintf(str, "Received data: 0x%X \n", Result);
 800040e:	1dbb      	adds	r3, r7, #6
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	001a      	movs	r2, r3
 8000414:	494e      	ldr	r1, [pc, #312]	; (8000550 <main+0x2cc>)
 8000416:	193b      	adds	r3, r7, r4
 8000418:	0018      	movs	r0, r3
 800041a:	f002 fd43 	bl	8002ea4 <siprintf>
			debugPrintln(&huart2, str);
 800041e:	193a      	adds	r2, r7, r4
 8000420:	4b44      	ldr	r3, [pc, #272]	; (8000534 <main+0x2b0>)
 8000422:	0011      	movs	r1, r2
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ff0d 	bl	8000244 <debugPrintln>

			//Increment address and data values and clear Result holder
			madd = madd + 1;
 800042a:	2252      	movs	r2, #82	; 0x52
 800042c:	18bb      	adds	r3, r7, r2
 800042e:	18ba      	adds	r2, r7, r2
 8000430:	8812      	ldrh	r2, [r2, #0]
 8000432:	3201      	adds	r2, #1
 8000434:	801a      	strh	r2, [r3, #0]
			Data = Data + 1;
 8000436:	1dfb      	adds	r3, r7, #7
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	b2da      	uxtb	r2, r3
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	701a      	strb	r2, [r3, #0]
			Result = 0x00;
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	2200      	movs	r2, #0
 8000446:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);  //Pause
 8000448:	23fa      	movs	r3, #250	; 0xfa
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fb4d 	bl	8000aec <HAL_Delay>
		for (i = 0; i < 5; i++) {
 8000452:	2157      	movs	r1, #87	; 0x57
 8000454:	187b      	adds	r3, r7, r1
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	187b      	adds	r3, r7, r1
 800045a:	3201      	adds	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
 800045e:	2357      	movs	r3, #87	; 0x57
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b04      	cmp	r3, #4
 8000466:	d800      	bhi.n	800046a <main+0x1e6>
 8000468:	e762      	b.n	8000330 <main+0xac>
		}

		//Read back last 5 values again:
		madd = madd - 5;
 800046a:	2252      	movs	r2, #82	; 0x52
 800046c:	18bb      	adds	r3, r7, r2
 800046e:	18ba      	adds	r2, r7, r2
 8000470:	8812      	ldrh	r2, [r2, #0]
 8000472:	3a05      	subs	r2, #5
 8000474:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < 5; j++) {
 8000476:	2356      	movs	r3, #86	; 0x56
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	e03f      	b.n	8000500 <main+0x27c>

			I2CReturn = HAL_I2C_Mem_Read(&hi2c1, EEPROM_DEVICE_ADDR, madd, 2,
 8000480:	2551      	movs	r5, #81	; 0x51
 8000482:	197c      	adds	r4, r7, r5
 8000484:	2352      	movs	r3, #82	; 0x52
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	881a      	ldrh	r2, [r3, #0]
 800048a:	234e      	movs	r3, #78	; 0x4e
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	8819      	ldrh	r1, [r3, #0]
 8000490:	482b      	ldr	r0, [pc, #172]	; (8000540 <main+0x2bc>)
 8000492:	2301      	movs	r3, #1
 8000494:	425b      	negs	r3, r3
 8000496:	9302      	str	r3, [sp, #8]
 8000498:	2301      	movs	r3, #1
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2302      	movs	r3, #2
 80004a2:	f000 ff67 	bl	8001374 <HAL_I2C_Mem_Read>
 80004a6:	0003      	movs	r3, r0
 80004a8:	7023      	strb	r3, [r4, #0]
					rData, 1, HAL_MAX_DELAY);
			if (I2CReturn != HAL_OK) {
 80004aa:	197b      	adds	r3, r7, r5
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d005      	beq.n	80004be <main+0x23a>
				debugPrintln(&huart2, "Read from address FAILED");
 80004b2:	4a26      	ldr	r2, [pc, #152]	; (800054c <main+0x2c8>)
 80004b4:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <main+0x2b0>)
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f7ff fec3 	bl	8000244 <debugPrintln>
			}

			//PRINT READ VALUE
			memset(str, 0, sizeof(str));
 80004be:	2408      	movs	r4, #8
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	223c      	movs	r2, #60	; 0x3c
 80004c4:	2100      	movs	r1, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 fce4 	bl	8002e94 <memset>
			sprintf(str, "Address 0x%X contains: 0x%X ", madd, Result);
 80004cc:	2552      	movs	r5, #82	; 0x52
 80004ce:	197b      	adds	r3, r7, r5
 80004d0:	881a      	ldrh	r2, [r3, #0]
 80004d2:	1dbb      	adds	r3, r7, #6
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	491f      	ldr	r1, [pc, #124]	; (8000554 <main+0x2d0>)
 80004d8:	1938      	adds	r0, r7, r4
 80004da:	f002 fce3 	bl	8002ea4 <siprintf>
			debugPrintln(&huart2, str);
 80004de:	193a      	adds	r2, r7, r4
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <main+0x2b0>)
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff fead 	bl	8000244 <debugPrintln>

			madd = madd + 1;
 80004ea:	197b      	adds	r3, r7, r5
 80004ec:	197a      	adds	r2, r7, r5
 80004ee:	8812      	ldrh	r2, [r2, #0]
 80004f0:	3201      	adds	r2, #1
 80004f2:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < 5; j++) {
 80004f4:	2156      	movs	r1, #86	; 0x56
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	3201      	adds	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	2356      	movs	r3, #86	; 0x56
 8000502:	18fb      	adds	r3, r7, r3
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b04      	cmp	r3, #4
 8000508:	d9ba      	bls.n	8000480 <main+0x1fc>
		}
		debugPrintln(&huart2, "-------------");
 800050a:	4a13      	ldr	r2, [pc, #76]	; (8000558 <main+0x2d4>)
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <main+0x2b0>)
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f7ff fe97 	bl	8000244 <debugPrintln>

		//Flash Blue LED
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4a10      	ldr	r2, [pc, #64]	; (800055c <main+0x2d8>)
 800051c:	0019      	movs	r1, r3
 800051e:	0010      	movs	r0, r2
 8000520:	f000 fd49 	bl	8000fb6 <HAL_GPIO_TogglePin>
		HAL_Delay(DELAY);
 8000524:	23fa      	movs	r3, #250	; 0xfa
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fadf 	bl	8000aec <HAL_Delay>
	while (1) {
 800052e:	e6e0      	b.n	80002f2 <main+0x6e>
 8000530:	08003790 	.word	0x08003790
 8000534:	200000d8 	.word	0x200000d8
 8000538:	080037b8 	.word	0x080037b8
 800053c:	080037c8 	.word	0x080037c8
 8000540:	2000008c 	.word	0x2000008c
 8000544:	080037ec 	.word	0x080037ec
 8000548:	08003804 	.word	0x08003804
 800054c:	08003828 	.word	0x08003828
 8000550:	08003844 	.word	0x08003844
 8000554:	0800385c 	.word	0x0800385c
 8000558:	0800387c 	.word	0x0800387c
 800055c:	48000800 	.word	0x48000800

08000560 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b097      	sub	sp, #92	; 0x5c
 8000564:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000566:	2428      	movs	r4, #40	; 0x28
 8000568:	193b      	adds	r3, r7, r4
 800056a:	0018      	movs	r0, r3
 800056c:	2330      	movs	r3, #48	; 0x30
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f002 fc8f 	bl	8002e94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000576:	2318      	movs	r3, #24
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	0018      	movs	r0, r3
 800057c:	2310      	movs	r3, #16
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 fc87 	bl	8002e94 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	0018      	movs	r0, r3
 800058a:	2314      	movs	r3, #20
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f002 fc80 	bl	8002e94 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	0021      	movs	r1, r4
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2202      	movs	r2, #2
 800059a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2201      	movs	r2, #1
 80005a0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2210      	movs	r2, #16
 80005a6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fafd 	bl	8001bb0 <HAL_RCC_OscConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x5e>
		Error_Handler();
 80005ba:	f000 f8f1 	bl	80007a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005be:	2118      	movs	r1, #24
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2207      	movs	r2, #7
 80005c4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2100      	movs	r1, #0
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fe01 	bl	80021e4 <HAL_RCC_ClockConfig>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x8a>
		Error_Handler();
 80005e6:	f000 f8db 	bl	80007a0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2220      	movs	r2, #32
 80005ee:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 ff45 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xa6>
		Error_Handler();
 8000602:	f000 f8cd 	bl	80007a0 <Error_Handler>
	}
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b017      	add	sp, #92	; 0x5c
 800060c:	bd90      	pop	{r4, r7, pc}
	...

08000610 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_I2C1_Init+0x74>)
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MX_I2C1_Init+0x78>)
 8000618:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_I2C1_Init+0x74>)
 800061c:	4a1b      	ldr	r2, [pc, #108]	; (800068c <MX_I2C1_Init+0x7c>)
 800061e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_I2C1_Init+0x74>)
 8000628:	2201      	movs	r2, #1
 800062a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_I2C1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C1_Init+0x74>)
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fccd 	bl	8000fec <HAL_I2C_Init>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000656:	f000 f8a3 	bl	80007a0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C1_Init+0x74>)
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f001 fa0e 	bl	8001a80 <HAL_I2CEx_ConfigAnalogFilter>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000668:	f000 f89a 	bl	80007a0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MX_I2C1_Init+0x74>)
 800066e:	2100      	movs	r1, #0
 8000670:	0018      	movs	r0, r3
 8000672:	f001 fa51 	bl	8001b18 <HAL_I2CEx_ConfigDigitalFilter>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800067a:	f000 f891 	bl	80007a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000008c 	.word	0x2000008c
 8000688:	40005400 	.word	0x40005400
 800068c:	2000090e 	.word	0x2000090e

08000690 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <MX_USART2_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 800069c:	2296      	movs	r2, #150	; 0x96
 800069e:	0192      	lsls	r2, r2, #6
 80006a0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 ffb5 	bl	8002644 <HAL_UART_Init>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80006de:	f000 f85f 	bl	80007a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000d8 	.word	0x200000d8
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006f6:	240c      	movs	r4, #12
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	0018      	movs	r0, r3
 80006fc:	2314      	movs	r3, #20
 80006fe:	001a      	movs	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	f002 fbc7 	bl	8002e94 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_GPIO_Init+0xa8>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_GPIO_Init+0xa8>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0289      	lsls	r1, r1, #10
 8000710:	430a      	orrs	r2, r1
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_GPIO_Init+0xa8>)
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	029b      	lsls	r3, r3, #10
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_GPIO_Init+0xa8>)
 8000724:	695a      	ldr	r2, [r3, #20]
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_GPIO_Init+0xa8>)
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0309      	lsls	r1, r1, #12
 800072c:	430a      	orrs	r2, r1
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_GPIO_Init+0xa8>)
 8000732:	695a      	ldr	r2, [r3, #20]
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	031b      	lsls	r3, r3, #12
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_GPIO_Init+0xa8>)
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_GPIO_Init+0xa8>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	02c9      	lsls	r1, r1, #11
 8000748:	430a      	orrs	r2, r1
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_GPIO_Init+0xa8>)
 800074e:	695a      	ldr	r2, [r3, #20]
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	02db      	lsls	r3, r3, #11
 8000754:	4013      	ands	r3, r2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	480f      	ldr	r0, [pc, #60]	; (800079c <MX_GPIO_Init+0xac>)
 8000760:	2200      	movs	r2, #0
 8000762:	0019      	movs	r1, r3
 8000764:	f000 fc0a 	bl	8000f7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	0052      	lsls	r2, r2, #1
 800076e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2201      	movs	r2, #1
 8000774:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000782:	193b      	adds	r3, r7, r4
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <MX_GPIO_Init+0xac>)
 8000786:	0019      	movs	r1, r3
 8000788:	0010      	movs	r0, r2
 800078a:	f000 fa87 	bl	8000c9c <HAL_GPIO_Init>

}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b009      	add	sp, #36	; 0x24
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40021000 	.word	0x40021000
 800079c:	48000800 	.word	0x48000800

080007a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	2101      	movs	r1, #1
 80007ba:	430a      	orrs	r2, r1
 80007bc:	619a      	str	r2, [r3, #24]
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	2201      	movs	r2, #1
 80007c4:	4013      	ands	r3, r2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	69da      	ldr	r2, [r3, #28]
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	0549      	lsls	r1, r1, #21
 80007d4:	430a      	orrs	r2, r1
 80007d6:	61da      	str	r2, [r3, #28]
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_MspInit+0x44>)
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	055b      	lsls	r3, r3, #21
 80007e0:	4013      	ands	r3, r2
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b08b      	sub	sp, #44	; 0x2c
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	2414      	movs	r4, #20
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	2314      	movs	r3, #20
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f002 fb44 	bl	8002e94 <memset>
  if(hi2c->Instance==I2C1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <HAL_I2C_MspInit+0x90>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d131      	bne.n	800087a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_I2C_MspInit+0x94>)
 8000818:	695a      	ldr	r2, [r3, #20]
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <HAL_I2C_MspInit+0x94>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	02c9      	lsls	r1, r1, #11
 8000820:	430a      	orrs	r2, r1
 8000822:	615a      	str	r2, [r3, #20]
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_I2C_MspInit+0x94>)
 8000826:	695a      	ldr	r2, [r3, #20]
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	02db      	lsls	r3, r3, #11
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000832:	0021      	movs	r1, r4
 8000834:	187b      	adds	r3, r7, r1
 8000836:	22c0      	movs	r2, #192	; 0xc0
 8000838:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2212      	movs	r2, #18
 800083e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2203      	movs	r2, #3
 800084a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2201      	movs	r2, #1
 8000850:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	187b      	adds	r3, r7, r1
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <HAL_I2C_MspInit+0x98>)
 8000856:	0019      	movs	r1, r3
 8000858:	0010      	movs	r0, r2
 800085a:	f000 fa1f 	bl	8000c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_I2C_MspInit+0x94>)
 8000860:	69da      	ldr	r2, [r3, #28]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_I2C_MspInit+0x94>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0389      	lsls	r1, r1, #14
 8000868:	430a      	orrs	r2, r1
 800086a:	61da      	str	r2, [r3, #28]
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_I2C_MspInit+0x94>)
 800086e:	69da      	ldr	r2, [r3, #28]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	039b      	lsls	r3, r3, #14
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b00b      	add	sp, #44	; 0x2c
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	40005400 	.word	0x40005400
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08b      	sub	sp, #44	; 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	2414      	movs	r4, #20
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	2314      	movs	r3, #20
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f002 faf6 	bl	8002e94 <memset>
  if(huart->Instance==USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <HAL_UART_MspInit+0x90>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d132      	bne.n	8000918 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_UART_MspInit+0x94>)
 80008b4:	69da      	ldr	r2, [r3, #28]
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_UART_MspInit+0x94>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0289      	lsls	r1, r1, #10
 80008bc:	430a      	orrs	r2, r1
 80008be:	61da      	str	r2, [r3, #28]
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_UART_MspInit+0x94>)
 80008c2:	69da      	ldr	r2, [r3, #28]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	029b      	lsls	r3, r3, #10
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_UART_MspInit+0x94>)
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_UART_MspInit+0x94>)
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0289      	lsls	r1, r1, #10
 80008d8:	430a      	orrs	r2, r1
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_UART_MspInit+0x94>)
 80008de:	695a      	ldr	r2, [r3, #20]
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	029b      	lsls	r3, r3, #10
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ea:	0021      	movs	r1, r4
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	220c      	movs	r2, #12
 80008f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2202      	movs	r2, #2
 80008f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2203      	movs	r2, #3
 8000902:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2201      	movs	r2, #1
 8000908:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	187a      	adds	r2, r7, r1
 800090c:	2390      	movs	r3, #144	; 0x90
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f000 f9c2 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b00b      	add	sp, #44	; 0x2c
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	40004400 	.word	0x40004400
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f8b2 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f002 fa5a 	bl	8002e40 <__errno>
 800098c:	0003      	movs	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	2301      	movs	r3, #1
 8000994:	425b      	negs	r3, r3
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	18d2      	adds	r2, r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <_sbrk+0x64>)
 80009a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b006      	add	sp, #24
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20002000 	.word	0x20002000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	2000015c 	.word	0x2000015c
 80009c0:	20000178 	.word	0x20000178

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80009d6:	490e      	ldr	r1, [pc, #56]	; (8000a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <LoopForever+0xe>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ec:	4c0b      	ldr	r4, [pc, #44]	; (8000a1c <LoopForever+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009fa:	f7ff ffe3 	bl	80009c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009fe:	f002 fa25 	bl	8002e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a02:	f7ff fc3f 	bl	8000284 <main>

08000a06 <LoopForever>:

LoopForever:
    b LoopForever
 8000a06:	e7fe      	b.n	8000a06 <LoopForever>
  ldr   r0, =_estack
 8000a08:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a14:	08003900 	.word	0x08003900
  ldr r2, =_sbss
 8000a18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a1c:	20000174 	.word	0x20000174

08000a20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_COMP_IRQHandler>
	...

08000a24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_Init+0x24>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_Init+0x24>)
 8000a2e:	2110      	movs	r1, #16
 8000a30:	430a      	orrs	r2, r1
 8000a32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f809 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3a:	f7ff feb7 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a56:	681c      	ldr	r4, [r3, #0]
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_InitTick+0x60>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	23fa      	movs	r3, #250	; 0xfa
 8000a60:	0098      	lsls	r0, r3, #2
 8000a62:	f7ff fb63 	bl	800012c <__udivsi3>
 8000a66:	0003      	movs	r3, r0
 8000a68:	0019      	movs	r1, r3
 8000a6a:	0020      	movs	r0, r4
 8000a6c:	f7ff fb5e 	bl	800012c <__udivsi3>
 8000a70:	0003      	movs	r3, r0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f905 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e00f      	b.n	8000aa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d80b      	bhi.n	8000a9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f8e2 	bl	8000c58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_InitTick+0x64>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	18d2      	adds	r2, r2, r3
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac6:	601a      	str	r2, [r3, #0]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000160 	.word	0x20000160

08000ad8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <HAL_GetTick+0x10>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	20000160 	.word	0x20000160

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff fff0 	bl	8000ad8 <HAL_GetTick>
 8000af8:	0003      	movs	r3, r0
 8000afa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3301      	adds	r3, #1
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	189b      	adds	r3, r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	f7ff ffe0 	bl	8000ad8 <HAL_GetTick>
 8000b18:	0002      	movs	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b004      	add	sp, #16
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20000008 	.word	0x20000008

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b7f      	cmp	r3, #127	; 0x7f
 8000b48:	d828      	bhi.n	8000b9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4a:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <__NVIC_SetPriority+0xd4>)
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	33c0      	adds	r3, #192	; 0xc0
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	589b      	ldr	r3, [r3, r2]
 8000b5a:	1dfa      	adds	r2, r7, #7
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	2203      	movs	r2, #3
 8000b62:	400a      	ands	r2, r1
 8000b64:	00d2      	lsls	r2, r2, #3
 8000b66:	21ff      	movs	r1, #255	; 0xff
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	401a      	ands	r2, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2303      	movs	r3, #3
 8000b82:	4003      	ands	r3, r0
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	481f      	ldr	r0, [pc, #124]	; (8000c08 <__NVIC_SetPriority+0xd4>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	430a      	orrs	r2, r1
 8000b94:	33c0      	adds	r3, #192	; 0xc0
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b9a:	e031      	b.n	8000c00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <__NVIC_SetPriority+0xd8>)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	3b08      	subs	r3, #8
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3306      	adds	r3, #6
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	0011      	movs	r1, r2
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	00d2      	lsls	r2, r2, #3
 8000bc2:	21ff      	movs	r1, #255	; 0xff
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	401a      	ands	r2, r3
 8000bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2303      	movs	r3, #3
 8000bde:	4003      	ands	r3, r0
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <__NVIC_SetPriority+0xd8>)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	001c      	movs	r4, r3
 8000bec:	230f      	movs	r3, #15
 8000bee:	4023      	ands	r3, r4
 8000bf0:	3b08      	subs	r3, #8
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	3306      	adds	r3, #6
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	18c3      	adds	r3, r0, r3
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b003      	add	sp, #12
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	1e5a      	subs	r2, r3, #1
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	045b      	lsls	r3, r3, #17
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d301      	bcc.n	8000c28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c24:	2301      	movs	r3, #1
 8000c26:	e010      	b.n	8000c4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <SysTick_Config+0x44>)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c30:	2301      	movs	r3, #1
 8000c32:	425b      	negs	r3, r3
 8000c34:	2103      	movs	r1, #3
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff ff7c 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x44>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x44>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	210f      	movs	r1, #15
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	1c02      	adds	r2, r0, #0
 8000c68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b004      	add	sp, #16
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ffbf 	bl	8000c10 <SysTick_Config>
 8000c92:	0003      	movs	r3, r0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000caa:	e14f      	b.n	8000f4c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d100      	bne.n	8000cc4 <HAL_GPIO_Init+0x28>
 8000cc2:	e140      	b.n	8000f46 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2203      	movs	r2, #3
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d005      	beq.n	8000cdc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d130      	bne.n	8000d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	0013      	movs	r3, r2
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d12:	2201      	movs	r2, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	2201      	movs	r2, #1
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2203      	movs	r2, #3
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d017      	beq.n	8000d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d123      	bne.n	8000dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	58d3      	ldr	r3, [r2, r3]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2207      	movs	r2, #7
 8000d98:	4013      	ands	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2107      	movs	r1, #7
 8000db2:	400b      	ands	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	0092      	lsls	r2, r2, #2
 8000dca:	6939      	ldr	r1, [r7, #16]
 8000dcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2203      	movs	r2, #3
 8000dec:	401a      	ands	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	23c0      	movs	r3, #192	; 0xc0
 8000e08:	029b      	lsls	r3, r3, #10
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d100      	bne.n	8000e10 <HAL_GPIO_Init+0x174>
 8000e0e:	e09a      	b.n	8000f46 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	4b54      	ldr	r3, [pc, #336]	; (8000f64 <HAL_GPIO_Init+0x2c8>)
 8000e12:	699a      	ldr	r2, [r3, #24]
 8000e14:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <HAL_GPIO_Init+0x2c8>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	619a      	str	r2, [r3, #24]
 8000e1c:	4b51      	ldr	r3, [pc, #324]	; (8000f64 <HAL_GPIO_Init+0x2c8>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	2201      	movs	r2, #1
 8000e22:	4013      	ands	r3, r2
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e28:	4a4f      	ldr	r2, [pc, #316]	; (8000f68 <HAL_GPIO_Init+0x2cc>)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	589b      	ldr	r3, [r3, r2]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	409a      	lsls	r2, r3
 8000e42:	0013      	movs	r3, r2
 8000e44:	43da      	mvns	r2, r3
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	2390      	movs	r3, #144	; 0x90
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x1e2>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a44      	ldr	r2, [pc, #272]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x1de>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a43      	ldr	r2, [pc, #268]	; (8000f70 <HAL_GPIO_Init+0x2d4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x1da>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a42      	ldr	r2, [pc, #264]	; (8000f74 <HAL_GPIO_Init+0x2d8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x1d6>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x1e4>
 8000e72:	2305      	movs	r3, #5
 8000e74:	e004      	b.n	8000e80 <HAL_GPIO_Init+0x1e4>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_Init+0x1e4>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x1e4>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	2103      	movs	r1, #3
 8000e84:	400a      	ands	r2, r1
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4093      	lsls	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e90:	4935      	ldr	r1, [pc, #212]	; (8000f68 <HAL_GPIO_Init+0x2cc>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <HAL_GPIO_Init+0x2dc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	025b      	lsls	r3, r3, #9
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_GPIO_Init+0x2dc>)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_GPIO_Init+0x2dc>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	029b      	lsls	r3, r3, #10
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_GPIO_Init+0x2dc>)
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_GPIO_Init+0x2dc>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	035b      	lsls	r3, r3, #13
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_GPIO_Init+0x2dc>)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_GPIO_Init+0x2dc>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	039b      	lsls	r3, r3, #14
 8000f34:	4013      	ands	r3, r2
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_GPIO_Init+0x2dc>)
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	40da      	lsrs	r2, r3
 8000f54:	1e13      	subs	r3, r2, #0
 8000f56:	d000      	beq.n	8000f5a <HAL_GPIO_Init+0x2be>
 8000f58:	e6a8      	b.n	8000cac <HAL_GPIO_Init+0x10>
  } 
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b006      	add	sp, #24
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	0008      	movs	r0, r1
 8000f86:	0011      	movs	r1, r2
 8000f88:	1cbb      	adds	r3, r7, #2
 8000f8a:	1c02      	adds	r2, r0, #0
 8000f8c:	801a      	strh	r2, [r3, #0]
 8000f8e:	1c7b      	adds	r3, r7, #1
 8000f90:	1c0a      	adds	r2, r1, #0
 8000f92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f94:	1c7b      	adds	r3, r7, #1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f9c:	1cbb      	adds	r3, r7, #2
 8000f9e:	881a      	ldrh	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa4:	e003      	b.n	8000fae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fa6:	1cbb      	adds	r3, r7, #2
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	000a      	movs	r2, r1
 8000fc0:	1cbb      	adds	r3, r7, #2
 8000fc2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fca:	1cbb      	adds	r3, r7, #2
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	041a      	lsls	r2, r3, #16
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	1cb9      	adds	r1, r7, #2
 8000fda:	8809      	ldrh	r1, [r1, #0]
 8000fdc:	400b      	ands	r3, r1
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b004      	add	sp, #16
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e082      	b.n	8001104 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2241      	movs	r2, #65	; 0x41
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d107      	bne.n	800101a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2240      	movs	r2, #64	; 0x40
 800100e:	2100      	movs	r1, #0
 8001010:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff fbed 	bl	80007f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2241      	movs	r2, #65	; 0x41
 800101e:	2124      	movs	r1, #36	; 0x24
 8001020:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	438a      	bics	r2, r1
 8001030:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4934      	ldr	r1, [pc, #208]	; (800110c <HAL_I2C_Init+0x120>)
 800103c:	400a      	ands	r2, r1
 800103e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4931      	ldr	r1, [pc, #196]	; (8001110 <HAL_I2C_Init+0x124>)
 800104c:	400a      	ands	r2, r1
 800104e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d108      	bne.n	800106a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0209      	lsls	r1, r1, #8
 8001064:	430a      	orrs	r2, r1
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	e007      	b.n	800107a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2184      	movs	r1, #132	; 0x84
 8001074:	0209      	lsls	r1, r1, #8
 8001076:	430a      	orrs	r2, r1
 8001078:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d104      	bne.n	800108c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	491f      	ldr	r1, [pc, #124]	; (8001114 <HAL_I2C_Init+0x128>)
 8001098:	430a      	orrs	r2, r1
 800109a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	491a      	ldr	r1, [pc, #104]	; (8001110 <HAL_I2C_Init+0x124>)
 80010a8:	400a      	ands	r2, r1
 80010aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69d9      	ldr	r1, [r3, #28]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1a      	ldr	r2, [r3, #32]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2241      	movs	r2, #65	; 0x41
 80010f0:	2120      	movs	r1, #32
 80010f2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2242      	movs	r2, #66	; 0x42
 80010fe:	2100      	movs	r1, #0
 8001100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}
 800110c:	f0ffffff 	.word	0xf0ffffff
 8001110:	ffff7fff 	.word	0xffff7fff
 8001114:	02008000 	.word	0x02008000

08001118 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af02      	add	r7, sp, #8
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	000c      	movs	r4, r1
 8001122:	0010      	movs	r0, r2
 8001124:	0019      	movs	r1, r3
 8001126:	230a      	movs	r3, #10
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	1c22      	adds	r2, r4, #0
 800112c:	801a      	strh	r2, [r3, #0]
 800112e:	2308      	movs	r3, #8
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	1c02      	adds	r2, r0, #0
 8001134:	801a      	strh	r2, [r3, #0]
 8001136:	1dbb      	adds	r3, r7, #6
 8001138:	1c0a      	adds	r2, r1, #0
 800113a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2241      	movs	r2, #65	; 0x41
 8001140:	5c9b      	ldrb	r3, [r3, r2]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b20      	cmp	r3, #32
 8001146:	d000      	beq.n	800114a <HAL_I2C_Mem_Write+0x32>
 8001148:	e10c      	b.n	8001364 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_I2C_Mem_Write+0x42>
 8001150:	232c      	movs	r3, #44	; 0x2c
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d105      	bne.n	8001166 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e0ff      	b.n	8001366 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2240      	movs	r2, #64	; 0x40
 800116a:	5c9b      	ldrb	r3, [r3, r2]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <HAL_I2C_Mem_Write+0x5c>
 8001170:	2302      	movs	r3, #2
 8001172:	e0f8      	b.n	8001366 <HAL_I2C_Mem_Write+0x24e>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2240      	movs	r2, #64	; 0x40
 8001178:	2101      	movs	r1, #1
 800117a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800117c:	f7ff fcac 	bl	8000ad8 <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	0219      	lsls	r1, r3, #8
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2319      	movs	r3, #25
 8001190:	2201      	movs	r2, #1
 8001192:	f000 fb0b 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0e3      	b.n	8001366 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2241      	movs	r2, #65	; 0x41
 80011a2:	2121      	movs	r1, #33	; 0x21
 80011a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2242      	movs	r2, #66	; 0x42
 80011aa:	2140      	movs	r1, #64	; 0x40
 80011ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	222c      	movs	r2, #44	; 0x2c
 80011be:	18ba      	adds	r2, r7, r2
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011ca:	1dbb      	adds	r3, r7, #6
 80011cc:	881c      	ldrh	r4, [r3, #0]
 80011ce:	2308      	movs	r3, #8
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	230a      	movs	r3, #10
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	8819      	ldrh	r1, [r3, #0]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	0023      	movs	r3, r4
 80011e6:	f000 f9f9 	bl	80015dc <I2C_RequestMemoryWrite>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d005      	beq.n	80011fa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	2100      	movs	r1, #0
 80011f4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e0b5      	b.n	8001366 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011fe:	b29b      	uxth	r3, r3
 8001200:	2bff      	cmp	r3, #255	; 0xff
 8001202:	d911      	bls.n	8001228 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120e:	b2da      	uxtb	r2, r3
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	045c      	lsls	r4, r3, #17
 8001214:	230a      	movs	r3, #10
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	8819      	ldrh	r1, [r3, #0]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	0023      	movs	r3, r4
 8001222:	f000 fbf7 	bl	8001a14 <I2C_TransferConfig>
 8001226:	e012      	b.n	800124e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122c:	b29a      	uxth	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001236:	b2da      	uxtb	r2, r3
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	049c      	lsls	r4, r3, #18
 800123c:	230a      	movs	r3, #10
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	8819      	ldrh	r1, [r3, #0]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	0023      	movs	r3, r4
 800124a:	f000 fbe3 	bl	8001a14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	0018      	movs	r0, r3
 8001256:	f000 fae8 	bl	800182a <I2C_WaitOnTXISFlagUntilTimeout>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e081      	b.n	8001366 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127c:	b29b      	uxth	r3, r3
 800127e:	3b01      	subs	r3, #1
 8001280:	b29a      	uxth	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800128a:	3b01      	subs	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001296:	b29b      	uxth	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d03a      	beq.n	8001312 <HAL_I2C_Mem_Write+0x1fa>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d136      	bne.n	8001312 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	0013      	movs	r3, r2
 80012ae:	2200      	movs	r2, #0
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	f000 fa7b 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e053      	b.n	8001366 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2bff      	cmp	r3, #255	; 0xff
 80012c6:	d911      	bls.n	80012ec <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	22ff      	movs	r2, #255	; 0xff
 80012cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	045c      	lsls	r4, r3, #17
 80012d8:	230a      	movs	r3, #10
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	8819      	ldrh	r1, [r3, #0]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	2300      	movs	r3, #0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	0023      	movs	r3, r4
 80012e6:	f000 fb95 	bl	8001a14 <I2C_TransferConfig>
 80012ea:	e012      	b.n	8001312 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	049c      	lsls	r4, r3, #18
 8001300:	230a      	movs	r3, #10
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	8819      	ldrh	r1, [r3, #0]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	2300      	movs	r3, #0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	0023      	movs	r3, r4
 800130e:	f000 fb81 	bl	8001a14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001316:	b29b      	uxth	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d198      	bne.n	800124e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	0018      	movs	r0, r3
 8001324:	f000 fac0 	bl	80018a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d001      	beq.n	8001330 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e01a      	b.n	8001366 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2220      	movs	r2, #32
 8001336:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	490b      	ldr	r1, [pc, #44]	; (8001370 <HAL_I2C_Mem_Write+0x258>)
 8001344:	400a      	ands	r2, r1
 8001346:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2241      	movs	r2, #65	; 0x41
 800134c:	2120      	movs	r1, #32
 800134e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2242      	movs	r2, #66	; 0x42
 8001354:	2100      	movs	r1, #0
 8001356:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2240      	movs	r2, #64	; 0x40
 800135c:	2100      	movs	r1, #0
 800135e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	e000      	b.n	8001366 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001364:	2302      	movs	r3, #2
  }
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b007      	add	sp, #28
 800136c:	bd90      	pop	{r4, r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	fe00e800 	.word	0xfe00e800

08001374 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	000c      	movs	r4, r1
 800137e:	0010      	movs	r0, r2
 8001380:	0019      	movs	r1, r3
 8001382:	230a      	movs	r3, #10
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	1c22      	adds	r2, r4, #0
 8001388:	801a      	strh	r2, [r3, #0]
 800138a:	2308      	movs	r3, #8
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	1c02      	adds	r2, r0, #0
 8001390:	801a      	strh	r2, [r3, #0]
 8001392:	1dbb      	adds	r3, r7, #6
 8001394:	1c0a      	adds	r2, r1, #0
 8001396:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2241      	movs	r2, #65	; 0x41
 800139c:	5c9b      	ldrb	r3, [r3, r2]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d000      	beq.n	80013a6 <HAL_I2C_Mem_Read+0x32>
 80013a4:	e110      	b.n	80015c8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <HAL_I2C_Mem_Read+0x42>
 80013ac:	232c      	movs	r3, #44	; 0x2c
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d105      	bne.n	80013c2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e103      	b.n	80015ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2240      	movs	r2, #64	; 0x40
 80013c6:	5c9b      	ldrb	r3, [r3, r2]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_I2C_Mem_Read+0x5c>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e0fc      	b.n	80015ca <HAL_I2C_Mem_Read+0x256>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2240      	movs	r2, #64	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013d8:	f7ff fb7e 	bl	8000ad8 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	0219      	lsls	r1, r3, #8
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2319      	movs	r3, #25
 80013ec:	2201      	movs	r2, #1
 80013ee:	f000 f9dd 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 80013f2:	1e03      	subs	r3, r0, #0
 80013f4:	d001      	beq.n	80013fa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0e7      	b.n	80015ca <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2241      	movs	r2, #65	; 0x41
 80013fe:	2122      	movs	r1, #34	; 0x22
 8001400:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2242      	movs	r2, #66	; 0x42
 8001406:	2140      	movs	r1, #64	; 0x40
 8001408:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	222c      	movs	r2, #44	; 0x2c
 800141a:	18ba      	adds	r2, r7, r2
 800141c:	8812      	ldrh	r2, [r2, #0]
 800141e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001426:	1dbb      	adds	r3, r7, #6
 8001428:	881c      	ldrh	r4, [r3, #0]
 800142a:	2308      	movs	r3, #8
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	230a      	movs	r3, #10
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	8819      	ldrh	r1, [r3, #0]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	0023      	movs	r3, r4
 8001442:	f000 f92f 	bl	80016a4 <I2C_RequestMemoryRead>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d005      	beq.n	8001456 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	2100      	movs	r1, #0
 8001450:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0b9      	b.n	80015ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145a:	b29b      	uxth	r3, r3
 800145c:	2bff      	cmp	r3, #255	; 0xff
 800145e:	d911      	bls.n	8001484 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	22ff      	movs	r2, #255	; 0xff
 8001464:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146a:	b2da      	uxtb	r2, r3
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	045c      	lsls	r4, r3, #17
 8001470:	230a      	movs	r3, #10
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	8819      	ldrh	r1, [r3, #0]
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <HAL_I2C_Mem_Read+0x260>)
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	0023      	movs	r3, r4
 800147e:	f000 fac9 	bl	8001a14 <I2C_TransferConfig>
 8001482:	e012      	b.n	80014aa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29a      	uxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	b2da      	uxtb	r2, r3
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	049c      	lsls	r4, r3, #18
 8001498:	230a      	movs	r3, #10
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	8819      	ldrh	r1, [r3, #0]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <HAL_I2C_Mem_Read+0x260>)
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	0023      	movs	r3, r4
 80014a6:	f000 fab5 	bl	8001a14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80014aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	0013      	movs	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	2104      	movs	r1, #4
 80014b8:	f000 f978 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 80014bc:	1e03      	subs	r3, r0, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e082      	b.n	80015ca <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d03a      	beq.n	8001576 <HAL_I2C_Mem_Read+0x202>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	d136      	bne.n	8001576 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	0013      	movs	r3, r2
 8001512:	2200      	movs	r2, #0
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	f000 f949 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e053      	b.n	80015ca <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001526:	b29b      	uxth	r3, r3
 8001528:	2bff      	cmp	r3, #255	; 0xff
 800152a:	d911      	bls.n	8001550 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	22ff      	movs	r2, #255	; 0xff
 8001530:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	b2da      	uxtb	r2, r3
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	045c      	lsls	r4, r3, #17
 800153c:	230a      	movs	r3, #10
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	8819      	ldrh	r1, [r3, #0]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	2300      	movs	r3, #0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	0023      	movs	r3, r4
 800154a:	f000 fa63 	bl	8001a14 <I2C_TransferConfig>
 800154e:	e012      	b.n	8001576 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001554:	b29a      	uxth	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155e:	b2da      	uxtb	r2, r3
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	049c      	lsls	r4, r3, #18
 8001564:	230a      	movs	r3, #10
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	8819      	ldrh	r1, [r3, #0]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	0023      	movs	r3, r4
 8001572:	f000 fa4f 	bl	8001a14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157a:	b29b      	uxth	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d194      	bne.n	80014aa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	0018      	movs	r0, r3
 8001588:	f000 f98e 	bl	80018a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800158c:	1e03      	subs	r3, r0, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e01a      	b.n	80015ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2220      	movs	r2, #32
 800159a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	490c      	ldr	r1, [pc, #48]	; (80015d8 <HAL_I2C_Mem_Read+0x264>)
 80015a8:	400a      	ands	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2241      	movs	r2, #65	; 0x41
 80015b0:	2120      	movs	r1, #32
 80015b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2242      	movs	r2, #66	; 0x42
 80015b8:	2100      	movs	r1, #0
 80015ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2240      	movs	r2, #64	; 0x40
 80015c0:	2100      	movs	r1, #0
 80015c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e000      	b.n	80015ca <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80015c8:	2302      	movs	r3, #2
  }
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b007      	add	sp, #28
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	80002400 	.word	0x80002400
 80015d8:	fe00e800 	.word	0xfe00e800

080015dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	000c      	movs	r4, r1
 80015e6:	0010      	movs	r0, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	250a      	movs	r5, #10
 80015ec:	197b      	adds	r3, r7, r5
 80015ee:	1c22      	adds	r2, r4, #0
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	2308      	movs	r3, #8
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	1c02      	adds	r2, r0, #0
 80015f8:	801a      	strh	r2, [r3, #0]
 80015fa:	1dbb      	adds	r3, r7, #6
 80015fc:	1c0a      	adds	r2, r1, #0
 80015fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001600:	1dbb      	adds	r3, r7, #6
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	045c      	lsls	r4, r3, #17
 800160a:	197b      	adds	r3, r7, r5
 800160c:	8819      	ldrh	r1, [r3, #0]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <I2C_RequestMemoryWrite+0xc4>)
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	0023      	movs	r3, r4
 8001616:	f000 f9fd 	bl	8001a14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	6a39      	ldr	r1, [r7, #32]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	0018      	movs	r0, r3
 8001622:	f000 f902 	bl	800182a <I2C_WaitOnTXISFlagUntilTimeout>
 8001626:	1e03      	subs	r3, r0, #0
 8001628:	d001      	beq.n	800162e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e033      	b.n	8001696 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800162e:	1dbb      	adds	r3, r7, #6
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001636:	2308      	movs	r3, #8
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
 8001644:	e019      	b.n	800167a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001646:	2308      	movs	r3, #8
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	b29b      	uxth	r3, r3
 8001650:	b2da      	uxtb	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165a:	6a39      	ldr	r1, [r7, #32]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	0018      	movs	r0, r3
 8001660:	f000 f8e3 	bl	800182a <I2C_WaitOnTXISFlagUntilTimeout>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d001      	beq.n	800166c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e014      	b.n	8001696 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800166c:	2308      	movs	r3, #8
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800167a:	6a3a      	ldr	r2, [r7, #32]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	0013      	movs	r3, r2
 8001684:	2200      	movs	r2, #0
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	f000 f890 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d001      	beq.n	8001694 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	80002000 	.word	0x80002000

080016a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	000c      	movs	r4, r1
 80016ae:	0010      	movs	r0, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	250a      	movs	r5, #10
 80016b4:	197b      	adds	r3, r7, r5
 80016b6:	1c22      	adds	r2, r4, #0
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	2308      	movs	r3, #8
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	1c02      	adds	r2, r0, #0
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	1dbb      	adds	r3, r7, #6
 80016c4:	1c0a      	adds	r2, r1, #0
 80016c6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016c8:	1dbb      	adds	r3, r7, #6
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	197b      	adds	r3, r7, r5
 80016d0:	8819      	ldrh	r1, [r3, #0]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <I2C_RequestMemoryRead+0xc0>)
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2300      	movs	r3, #0
 80016da:	f000 f99b 	bl	8001a14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e0:	6a39      	ldr	r1, [r7, #32]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 f8a0 	bl	800182a <I2C_WaitOnTXISFlagUntilTimeout>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d001      	beq.n	80016f2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e033      	b.n	800175a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016f2:	1dbb      	adds	r3, r7, #6
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d107      	bne.n	800170a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016fa:	2308      	movs	r3, #8
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
 8001708:	e019      	b.n	800173e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800170a:	2308      	movs	r3, #8
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	b29b      	uxth	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800171c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	0018      	movs	r0, r3
 8001724:	f000 f881 	bl	800182a <I2C_WaitOnTXISFlagUntilTimeout>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d001      	beq.n	8001730 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e014      	b.n	800175a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001730:	2308      	movs	r3, #8
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800173e:	6a3a      	ldr	r2, [r7, #32]
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	0013      	movs	r3, r2
 8001748:	2200      	movs	r2, #0
 800174a:	2140      	movs	r1, #64	; 0x40
 800174c:	f000 f82e 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bdb0      	pop	{r4, r5, r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	80002000 	.word	0x80002000

08001768 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	2b02      	cmp	r3, #2
 800177c:	d103      	bne.n	8001786 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2200      	movs	r2, #0
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	2b01      	cmp	r3, #1
 8001792:	d007      	beq.n	80017a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	430a      	orrs	r2, r1
 80017a2:	619a      	str	r2, [r3, #24]
  }
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}

080017ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017bc:	e021      	b.n	8001802 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	d01e      	beq.n	8001802 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c4:	f7ff f988 	bl	8000ad8 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d302      	bcc.n	80017da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d113      	bne.n	8001802 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	2220      	movs	r2, #32
 80017e0:	431a      	orrs	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2241      	movs	r2, #65	; 0x41
 80017ea:	2120      	movs	r1, #32
 80017ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2242      	movs	r2, #66	; 0x42
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	4013      	ands	r3, r2
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	425a      	negs	r2, r3
 8001812:	4153      	adcs	r3, r2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	001a      	movs	r2, r3
 8001818:	1dfb      	adds	r3, r7, #7
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d0ce      	beq.n	80017be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}

0800182a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001836:	e02b      	b.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	0018      	movs	r0, r3
 8001840:	f000 f86e 	bl	8001920 <I2C_IsAcknowledgeFailed>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d001      	beq.n	800184c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e029      	b.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	3301      	adds	r3, #1
 8001850:	d01e      	beq.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001852:	f7ff f941 	bl	8000ad8 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	429a      	cmp	r2, r3
 8001860:	d302      	bcc.n	8001868 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d113      	bne.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	2220      	movs	r2, #32
 800186e:	431a      	orrs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2241      	movs	r2, #65	; 0x41
 8001878:	2120      	movs	r1, #32
 800187a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2242      	movs	r2, #66	; 0x42
 8001880:	2100      	movs	r1, #0
 8001882:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e007      	b.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	2b02      	cmp	r3, #2
 800189c:	d1cc      	bne.n	8001838 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b004      	add	sp, #16
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018b4:	e028      	b.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	0018      	movs	r0, r3
 80018be:	f000 f82f 	bl	8001920 <I2C_IsAcknowledgeFailed>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d001      	beq.n	80018ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e026      	b.n	8001918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ca:	f7ff f905 	bl	8000ad8 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d302      	bcc.n	80018e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d113      	bne.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	2220      	movs	r2, #32
 80018e6:	431a      	orrs	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2241      	movs	r2, #65	; 0x41
 80018f0:	2120      	movs	r1, #32
 80018f2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2242      	movs	r2, #66	; 0x42
 80018f8:	2100      	movs	r1, #0
 80018fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	2100      	movs	r1, #0
 8001902:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e007      	b.n	8001918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2220      	movs	r2, #32
 8001910:	4013      	ands	r3, r2
 8001912:	2b20      	cmp	r3, #32
 8001914:	d1cf      	bne.n	80018b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}

08001920 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2210      	movs	r2, #16
 8001934:	4013      	ands	r3, r2
 8001936:	2b10      	cmp	r3, #16
 8001938:	d164      	bne.n	8001a04 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	049b      	lsls	r3, r3, #18
 8001944:	401a      	ands	r2, r3
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	049b      	lsls	r3, r3, #18
 800194a:	429a      	cmp	r2, r3
 800194c:	d02b      	beq.n	80019a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	01c9      	lsls	r1, r1, #7
 800195c:	430a      	orrs	r2, r1
 800195e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001960:	e021      	b.n	80019a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3301      	adds	r3, #1
 8001966:	d01e      	beq.n	80019a6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001968:	f7ff f8b6 	bl	8000ad8 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	429a      	cmp	r2, r3
 8001976:	d302      	bcc.n	800197e <I2C_IsAcknowledgeFailed+0x5e>
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d113      	bne.n	80019a6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	2220      	movs	r2, #32
 8001984:	431a      	orrs	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2241      	movs	r2, #65	; 0x41
 800198e:	2120      	movs	r1, #32
 8001990:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2242      	movs	r2, #66	; 0x42
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2240      	movs	r2, #64	; 0x40
 800199e:	2100      	movs	r1, #0
 80019a0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e02f      	b.n	8001a06 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2220      	movs	r2, #32
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d1d6      	bne.n	8001962 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2210      	movs	r2, #16
 80019ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2220      	movs	r2, #32
 80019c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7ff fece 	bl	8001768 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	490e      	ldr	r1, [pc, #56]	; (8001a10 <I2C_IsAcknowledgeFailed+0xf0>)
 80019d8:	400a      	ands	r2, r1
 80019da:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	2204      	movs	r2, #4
 80019e2:	431a      	orrs	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2241      	movs	r2, #65	; 0x41
 80019ec:	2120      	movs	r1, #32
 80019ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2242      	movs	r2, #66	; 0x42
 80019f4:	2100      	movs	r1, #0
 80019f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	2100      	movs	r1, #0
 80019fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b004      	add	sp, #16
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	fe00e800 	.word	0xfe00e800

08001a14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	0008      	movs	r0, r1
 8001a1e:	0011      	movs	r1, r2
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	240a      	movs	r4, #10
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	1c02      	adds	r2, r0, #0
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	2009      	movs	r0, #9
 8001a2c:	183b      	adds	r3, r7, r0
 8001a2e:	1c0a      	adds	r2, r1, #0
 8001a30:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	6a3a      	ldr	r2, [r7, #32]
 8001a3a:	0d51      	lsrs	r1, r2, #21
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	00d2      	lsls	r2, r2, #3
 8001a40:	400a      	ands	r2, r1
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <I2C_TransferConfig+0x68>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	43d2      	mvns	r2, r2
 8001a48:	401a      	ands	r2, r3
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	059b      	lsls	r3, r3, #22
 8001a52:	0d9a      	lsrs	r2, r3, #22
 8001a54:	183b      	adds	r3, r7, r0
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	0418      	lsls	r0, r3, #16
 8001a5a:	23ff      	movs	r3, #255	; 0xff
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	4003      	ands	r3, r0
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b005      	add	sp, #20
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	03ff63ff 	.word	0x03ff63ff

08001a80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2241      	movs	r2, #65	; 0x41
 8001a8e:	5c9b      	ldrb	r3, [r3, r2]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d138      	bne.n	8001b08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2240      	movs	r2, #64	; 0x40
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e032      	b.n	8001b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2241      	movs	r2, #65	; 0x41
 8001ab0:	2124      	movs	r1, #36	; 0x24
 8001ab2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2101      	movs	r1, #1
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2241      	movs	r2, #65	; 0x41
 8001af8:	2120      	movs	r1, #32
 8001afa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	2100      	movs	r1, #0
 8001b02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e000      	b.n	8001b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
  }
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	ffffefff 	.word	0xffffefff

08001b18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2241      	movs	r2, #65	; 0x41
 8001b26:	5c9b      	ldrb	r3, [r3, r2]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d139      	bne.n	8001ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2240      	movs	r2, #64	; 0x40
 8001b32:	5c9b      	ldrb	r3, [r3, r2]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e033      	b.n	8001ba4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2240      	movs	r2, #64	; 0x40
 8001b40:	2101      	movs	r1, #1
 8001b42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2241      	movs	r2, #65	; 0x41
 8001b48:	2124      	movs	r1, #36	; 0x24
 8001b4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2101      	movs	r1, #1
 8001b58:	438a      	bics	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4a11      	ldr	r2, [pc, #68]	; (8001bac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2241      	movs	r2, #65	; 0x41
 8001b92:	2120      	movs	r1, #32
 8001b94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
  }
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b004      	add	sp, #16
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	fffff0ff 	.word	0xfffff0ff

08001bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e301      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d100      	bne.n	8001bce <HAL_RCC_OscConfig+0x1e>
 8001bcc:	e08d      	b.n	8001cea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bce:	4bc3      	ldr	r3, [pc, #780]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d00e      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bda:	4bc0      	ldr	r3, [pc, #768]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	220c      	movs	r2, #12
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d116      	bne.n	8001c14 <HAL_RCC_OscConfig+0x64>
 8001be6:	4bbd      	ldr	r3, [pc, #756]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	401a      	ands	r2, r3
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	025b      	lsls	r3, r3, #9
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d10d      	bne.n	8001c14 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	4bb8      	ldr	r3, [pc, #736]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	029b      	lsls	r3, r3, #10
 8001c00:	4013      	ands	r3, r2
 8001c02:	d100      	bne.n	8001c06 <HAL_RCC_OscConfig+0x56>
 8001c04:	e070      	b.n	8001ce8 <HAL_RCC_OscConfig+0x138>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d000      	beq.n	8001c10 <HAL_RCC_OscConfig+0x60>
 8001c0e:	e06b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e2d8      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_OscConfig+0x7c>
 8001c1c:	4baf      	ldr	r3, [pc, #700]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4bae      	ldr	r3, [pc, #696]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	0249      	lsls	r1, r1, #9
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e02f      	b.n	8001c8c <HAL_RCC_OscConfig+0xdc>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x9e>
 8001c34:	4ba9      	ldr	r3, [pc, #676]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4ba8      	ldr	r3, [pc, #672]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	49a9      	ldr	r1, [pc, #676]	; (8001ee0 <HAL_RCC_OscConfig+0x330>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	4ba6      	ldr	r3, [pc, #664]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4ba5      	ldr	r3, [pc, #660]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c46:	49a7      	ldr	r1, [pc, #668]	; (8001ee4 <HAL_RCC_OscConfig+0x334>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e01e      	b.n	8001c8c <HAL_RCC_OscConfig+0xdc>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d10e      	bne.n	8001c74 <HAL_RCC_OscConfig+0xc4>
 8001c56:	4ba1      	ldr	r3, [pc, #644]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4ba0      	ldr	r3, [pc, #640]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	02c9      	lsls	r1, r1, #11
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	4b9d      	ldr	r3, [pc, #628]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b9c      	ldr	r3, [pc, #624]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0249      	lsls	r1, r1, #9
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xdc>
 8001c74:	4b99      	ldr	r3, [pc, #612]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b98      	ldr	r3, [pc, #608]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	4999      	ldr	r1, [pc, #612]	; (8001ee0 <HAL_RCC_OscConfig+0x330>)
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4b96      	ldr	r3, [pc, #600]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b95      	ldr	r3, [pc, #596]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001c86:	4997      	ldr	r1, [pc, #604]	; (8001ee4 <HAL_RCC_OscConfig+0x334>)
 8001c88:	400a      	ands	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d014      	beq.n	8001cbe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe ff20 	bl	8000ad8 <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9e:	f7fe ff1b 	bl	8000ad8 <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b64      	cmp	r3, #100	; 0x64
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e28a      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb0:	4b8a      	ldr	r3, [pc, #552]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0xee>
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe ff0b 	bl	8000ad8 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7fe ff06 	bl	8000ad8 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e275      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b80      	ldr	r3, [pc, #512]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	029b      	lsls	r3, r3, #10
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x118>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x146>
 8001cf4:	e069      	b.n	8001dca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cf6:	4b79      	ldr	r3, [pc, #484]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d00b      	beq.n	8001d18 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d00:	4b76      	ldr	r3, [pc, #472]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	220c      	movs	r2, #12
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d11c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x196>
 8001d0c:	4b73      	ldr	r3, [pc, #460]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	025b      	lsls	r3, r3, #9
 8001d14:	4013      	ands	r3, r2
 8001d16:	d116      	bne.n	8001d46 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d18:	4b70      	ldr	r3, [pc, #448]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x17e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e24b      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	4b6b      	ldr	r3, [pc, #428]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	22f8      	movs	r2, #248	; 0xf8
 8001d34:	4393      	bics	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	00da      	lsls	r2, r3, #3
 8001d3e:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d44:	e041      	b.n	8001dca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d024      	beq.n	8001d98 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b62      	ldr	r3, [pc, #392]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d54:	2101      	movs	r1, #1
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7fe febd 	bl	8000ad8 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d64:	f7fe feb8 	bl	8000ad8 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e227      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0f1      	beq.n	8001d64 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b56      	ldr	r3, [pc, #344]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	22f8      	movs	r2, #248	; 0xf8
 8001d86:	4393      	bics	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00da      	lsls	r2, r3, #3
 8001d90:	4b52      	ldr	r3, [pc, #328]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e018      	b.n	8001dca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	438a      	bics	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7fe fe98 	bl	8000ad8 <HAL_GetTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dae:	f7fe fe93 	bl	8000ad8 <HAL_GetTick>
 8001db2:	0002      	movs	r2, r0
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e202      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d1f1      	bne.n	8001dae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2208      	movs	r2, #8
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d036      	beq.n	8001e42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d019      	beq.n	8001e10 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ddc:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de0:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001de2:	2101      	movs	r1, #1
 8001de4:	430a      	orrs	r2, r1
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7fe fe76 	bl	8000ad8 <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7fe fe71 	bl	8000ad8 <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1e0      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d0f1      	beq.n	8001df2 <HAL_RCC_OscConfig+0x242>
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e10:	4b32      	ldr	r3, [pc, #200]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001e16:	2101      	movs	r1, #1
 8001e18:	438a      	bics	r2, r1
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7fe fe5c 	bl	8000ad8 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e26:	f7fe fe57 	bl	8000ad8 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1c6      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d1f1      	bne.n	8001e26 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2204      	movs	r2, #4
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d100      	bne.n	8001e4e <HAL_RCC_OscConfig+0x29e>
 8001e4c:	e0b4      	b.n	8001fb8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	201f      	movs	r0, #31
 8001e50:	183b      	adds	r3, r7, r0
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	055b      	lsls	r3, r3, #21
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d110      	bne.n	8001e84 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0549      	lsls	r1, r1, #21
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	61da      	str	r2, [r3, #28]
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	055b      	lsls	r3, r3, #21
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e7e:	183b      	adds	r3, r7, r0
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_RCC_OscConfig+0x338>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d11a      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_RCC_OscConfig+0x338>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_RCC_OscConfig+0x338>)
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	0049      	lsls	r1, r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fe1b 	bl	8000ad8 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea8:	f7fe fe16 	bl	8000ad8 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e185      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x338>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10e      	bne.n	8001eec <HAL_RCC_OscConfig+0x33c>
 8001ece:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	4b02      	ldr	r3, [pc, #8]	; (8001edc <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	621a      	str	r2, [r3, #32]
 8001eda:	e035      	b.n	8001f48 <HAL_RCC_OscConfig+0x398>
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	fffeffff 	.word	0xfffeffff
 8001ee4:	fffbffff 	.word	0xfffbffff
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x35e>
 8001ef4:	4bb6      	ldr	r3, [pc, #728]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001ef6:	6a1a      	ldr	r2, [r3, #32]
 8001ef8:	4bb5      	ldr	r3, [pc, #724]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	438a      	bics	r2, r1
 8001efe:	621a      	str	r2, [r3, #32]
 8001f00:	4bb3      	ldr	r3, [pc, #716]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f02:	6a1a      	ldr	r2, [r3, #32]
 8001f04:	4bb2      	ldr	r3, [pc, #712]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f06:	2104      	movs	r1, #4
 8001f08:	438a      	bics	r2, r1
 8001f0a:	621a      	str	r2, [r3, #32]
 8001f0c:	e01c      	b.n	8001f48 <HAL_RCC_OscConfig+0x398>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x380>
 8001f16:	4bae      	ldr	r3, [pc, #696]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f18:	6a1a      	ldr	r2, [r3, #32]
 8001f1a:	4bad      	ldr	r3, [pc, #692]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	621a      	str	r2, [r3, #32]
 8001f22:	4bab      	ldr	r3, [pc, #684]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	4baa      	ldr	r3, [pc, #680]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	621a      	str	r2, [r3, #32]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0x398>
 8001f30:	4ba7      	ldr	r3, [pc, #668]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	4ba6      	ldr	r3, [pc, #664]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f36:	2101      	movs	r1, #1
 8001f38:	438a      	bics	r2, r1
 8001f3a:	621a      	str	r2, [r3, #32]
 8001f3c:	4ba4      	ldr	r3, [pc, #656]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	4ba3      	ldr	r3, [pc, #652]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f42:	2104      	movs	r1, #4
 8001f44:	438a      	bics	r2, r1
 8001f46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d014      	beq.n	8001f7a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7fe fdc2 	bl	8000ad8 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7fe fdbd 	bl	8000ad8 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	4a9b      	ldr	r2, [pc, #620]	; (80021d4 <HAL_RCC_OscConfig+0x624>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e12b      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6e:	4b98      	ldr	r3, [pc, #608]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3aa>
 8001f78:	e013      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fdad 	bl	8000ad8 <HAL_GetTick>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f82:	e009      	b.n	8001f98 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7fe fda8 	bl	8000ad8 <HAL_GetTick>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	4a91      	ldr	r2, [pc, #580]	; (80021d4 <HAL_RCC_OscConfig+0x624>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e116      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f98:	4b8d      	ldr	r3, [pc, #564]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fa2:	231f      	movs	r3, #31
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fac:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	4b87      	ldr	r3, [pc, #540]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001fb2:	4989      	ldr	r1, [pc, #548]	; (80021d8 <HAL_RCC_OscConfig+0x628>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d063      	beq.n	800208a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d12a      	bne.n	8002020 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fca:	4b81      	ldr	r3, [pc, #516]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fce:	4b80      	ldr	r3, [pc, #512]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001fd6:	4b7e      	ldr	r3, [pc, #504]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fda:	4b7d      	ldr	r3, [pc, #500]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe fd79 	bl	8000ad8 <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fec:	f7fe fd74 	bl	8000ad8 <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0e3      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ffe:	4b74      	ldr	r3, [pc, #464]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	2202      	movs	r2, #2
 8002004:	4013      	ands	r3, r2
 8002006:	d0f1      	beq.n	8001fec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002008:	4b71      	ldr	r3, [pc, #452]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	22f8      	movs	r2, #248	; 0xf8
 800200e:	4393      	bics	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	00da      	lsls	r2, r3, #3
 8002018:	4b6d      	ldr	r3, [pc, #436]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800201a:	430a      	orrs	r2, r1
 800201c:	635a      	str	r2, [r3, #52]	; 0x34
 800201e:	e034      	b.n	800208a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	3305      	adds	r3, #5
 8002026:	d111      	bne.n	800204c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002028:	4b69      	ldr	r3, [pc, #420]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800202a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202c:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800202e:	2104      	movs	r1, #4
 8002030:	438a      	bics	r2, r1
 8002032:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002034:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002038:	22f8      	movs	r2, #248	; 0xf8
 800203a:	4393      	bics	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	00da      	lsls	r2, r3, #3
 8002044:	4b62      	ldr	r3, [pc, #392]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002046:	430a      	orrs	r2, r1
 8002048:	635a      	str	r2, [r3, #52]	; 0x34
 800204a:	e01e      	b.n	800208a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800204c:	4b60      	ldr	r3, [pc, #384]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800204e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002050:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002052:	2104      	movs	r1, #4
 8002054:	430a      	orrs	r2, r1
 8002056:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002058:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800205a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205c:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800205e:	2101      	movs	r1, #1
 8002060:	438a      	bics	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7fe fd38 	bl	8000ad8 <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800206e:	f7fe fd33 	bl	8000ad8 <HAL_GetTick>
 8002072:	0002      	movs	r2, r0
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e0a2      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	2202      	movs	r2, #2
 8002086:	4013      	ands	r3, r2
 8002088:	d1f1      	bne.n	800206e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d100      	bne.n	8002094 <HAL_RCC_OscConfig+0x4e4>
 8002092:	e097      	b.n	80021c4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002094:	4b4e      	ldr	r3, [pc, #312]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	220c      	movs	r2, #12
 800209a:	4013      	ands	r3, r2
 800209c:	2b08      	cmp	r3, #8
 800209e:	d100      	bne.n	80020a2 <HAL_RCC_OscConfig+0x4f2>
 80020a0:	e06b      	b.n	800217a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d14c      	bne.n	8002144 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b48      	ldr	r3, [pc, #288]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 80020b0:	494a      	ldr	r1, [pc, #296]	; (80021dc <HAL_RCC_OscConfig+0x62c>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7fe fd0f 	bl	8000ad8 <HAL_GetTick>
 80020ba:	0003      	movs	r3, r0
 80020bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fd0a 	bl	8000ad8 <HAL_GetTick>
 80020c4:	0002      	movs	r2, r0
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e079      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d2:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	049b      	lsls	r3, r3, #18
 80020da:	4013      	ands	r3, r2
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020de:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	220f      	movs	r2, #15
 80020e4:	4393      	bics	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <HAL_RCC_OscConfig+0x630>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	431a      	orrs	r2, r3
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b30      	ldr	r3, [pc, #192]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0449      	lsls	r1, r1, #17
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7fe fcdd 	bl	8000ad8 <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe fcd8 	bl	8000ad8 <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e047      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	049b      	lsls	r3, r3, #18
 800213e:	4013      	ands	r3, r2
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x574>
 8002142:	e03f      	b.n	80021c4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800214a:	4924      	ldr	r1, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x62c>)
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fcc2 	bl	8000ad8 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215a:	f7fe fcbd 	bl	8000ad8 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e02c      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	049b      	lsls	r3, r3, #18
 8002174:	4013      	ands	r3, r2
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x5aa>
 8002178:	e024      	b.n	80021c4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e01f      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCC_OscConfig+0x620>)
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	401a      	ands	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	429a      	cmp	r2, r3
 80021a0:	d10e      	bne.n	80021c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	220f      	movs	r2, #15
 80021a6:	401a      	ands	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	23f0      	movs	r3, #240	; 0xf0
 80021b4:	039b      	lsls	r3, r3, #14
 80021b6:	401a      	ands	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b008      	add	sp, #32
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40021000 	.word	0x40021000
 80021d4:	00001388 	.word	0x00001388
 80021d8:	efffffff 	.word	0xefffffff
 80021dc:	feffffff 	.word	0xfeffffff
 80021e0:	ffc2ffff 	.word	0xffc2ffff

080021e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0b3      	b.n	8002360 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <HAL_RCC_ClockConfig+0x184>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d911      	bls.n	800222a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b58      	ldr	r3, [pc, #352]	; (8002368 <HAL_RCC_ClockConfig+0x184>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2201      	movs	r2, #1
 800220c:	4393      	bics	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	4b55      	ldr	r3, [pc, #340]	; (8002368 <HAL_RCC_ClockConfig+0x184>)
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002218:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_ClockConfig+0x184>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2201      	movs	r2, #1
 800221e:	4013      	ands	r3, r2
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e09a      	b.n	8002360 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2202      	movs	r2, #2
 8002230:	4013      	ands	r3, r2
 8002232:	d015      	beq.n	8002260 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2204      	movs	r2, #4
 800223a:	4013      	ands	r3, r2
 800223c:	d006      	beq.n	800224c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800223e:	4b4b      	ldr	r3, [pc, #300]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4b4a      	ldr	r3, [pc, #296]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 8002244:	21e0      	movs	r1, #224	; 0xe0
 8002246:	00c9      	lsls	r1, r1, #3
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	22f0      	movs	r2, #240	; 0xf0
 8002252:	4393      	bics	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b44      	ldr	r3, [pc, #272]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	d040      	beq.n	80022ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b3e      	ldr	r3, [pc, #248]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	029b      	lsls	r3, r3, #10
 800227a:	4013      	ands	r3, r2
 800227c:	d114      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06e      	b.n	8002360 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b38      	ldr	r3, [pc, #224]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	049b      	lsls	r3, r3, #18
 8002292:	4013      	ands	r3, r2
 8002294:	d108      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e062      	b.n	8002360 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e05b      	b.n	8002360 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2203      	movs	r2, #3
 80022ae:	4393      	bics	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 80022b8:	430a      	orrs	r2, r1
 80022ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7fe fc0c 	bl	8000ad8 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c4:	e009      	b.n	80022da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c6:	f7fe fc07 	bl	8000ad8 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	4a27      	ldr	r2, [pc, #156]	; (8002370 <HAL_RCC_ClockConfig+0x18c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e042      	b.n	8002360 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	220c      	movs	r2, #12
 80022e0:	401a      	ands	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1ec      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_RCC_ClockConfig+0x184>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d211      	bcs.n	800231e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_RCC_ClockConfig+0x184>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2201      	movs	r2, #1
 8002300:	4393      	bics	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_RCC_ClockConfig+0x184>)
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_RCC_ClockConfig+0x184>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2201      	movs	r2, #1
 8002312:	4013      	ands	r3, r2
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e020      	b.n	8002360 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2204      	movs	r2, #4
 8002324:	4013      	ands	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_RCC_ClockConfig+0x190>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800233c:	f000 f820 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8002340:	0001      	movs	r1, r0
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x188>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	220f      	movs	r2, #15
 800234a:	4013      	ands	r3, r2
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x194>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	000a      	movs	r2, r1
 8002352:	40da      	lsrs	r2, r3
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x198>)
 8002356:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002358:	2003      	movs	r0, #3
 800235a:	f7fe fb77 	bl	8000a4c <HAL_InitTick>
  
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40022000 	.word	0x40022000
 800236c:	40021000 	.word	0x40021000
 8002370:	00001388 	.word	0x00001388
 8002374:	fffff8ff 	.word	0xfffff8ff
 8002378:	080038ac 	.word	0x080038ac
 800237c:	20000000 	.word	0x20000000

08002380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b08f      	sub	sp, #60	; 0x3c
 8002384:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002386:	2314      	movs	r3, #20
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800238c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800238e:	c313      	stmia	r3!, {r0, r1, r4}
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4a29      	ldr	r2, [pc, #164]	; (800243c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002398:	ca13      	ldmia	r2!, {r0, r1, r4}
 800239a:	c313      	stmia	r3!, {r0, r1, r4}
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a4:	2300      	movs	r3, #0
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	220c      	movs	r2, #12
 80023be:	4013      	ands	r3, r2
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d002      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x4a>
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d003      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x50>
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023ce:	e02d      	b.n	800242c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	0c9b      	lsrs	r3, r3, #18
 80023d4:	220f      	movs	r2, #15
 80023d6:	4013      	ands	r3, r2
 80023d8:	2214      	movs	r2, #20
 80023da:	18ba      	adds	r2, r7, r2
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	220f      	movs	r2, #15
 80023e6:	4013      	ands	r3, r2
 80023e8:	1d3a      	adds	r2, r7, #4
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	025b      	lsls	r3, r3, #9
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023fa:	4812      	ldr	r0, [pc, #72]	; (8002444 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023fc:	f7fd fe96 	bl	800012c <__udivsi3>
 8002400:	0003      	movs	r3, r0
 8002402:	001a      	movs	r2, r3
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	4353      	muls	r3, r2
 8002408:	637b      	str	r3, [r7, #52]	; 0x34
 800240a:	e009      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800240c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240e:	000a      	movs	r2, r1
 8002410:	0152      	lsls	r2, r2, #5
 8002412:	1a52      	subs	r2, r2, r1
 8002414:	0193      	lsls	r3, r2, #6
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	185b      	adds	r3, r3, r1
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002424:	e002      	b.n	800242c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800242a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b00f      	add	sp, #60	; 0x3c
 8002434:	bd90      	pop	{r4, r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	0800388c 	.word	0x0800388c
 800243c:	0800389c 	.word	0x0800389c
 8002440:	40021000 	.word	0x40021000
 8002444:	007a1200 	.word	0x007a1200

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <HAL_RCC_GetHCLKFreq+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002460:	f7ff fff2 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002464:	0001      	movs	r1, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	2207      	movs	r2, #7
 800246e:	4013      	ands	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	40d9      	lsrs	r1, r3
 8002476:	000b      	movs	r3, r1
}    
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	080038bc 	.word	0x080038bc

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80024a4:	e08e      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2017      	movs	r0, #23
 80024a8:	183b      	adds	r3, r7, r0
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	055b      	lsls	r3, r3, #21
 80024b6:	4013      	ands	r3, r2
 80024b8:	d110      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b5c      	ldr	r3, [pc, #368]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	4b5b      	ldr	r3, [pc, #364]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0549      	lsls	r1, r1, #21
 80024c4:	430a      	orrs	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
 80024c8:	4b58      	ldr	r3, [pc, #352]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	055b      	lsls	r3, r3, #21
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	183b      	adds	r3, r7, r0
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b54      	ldr	r3, [pc, #336]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d11a      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e8:	4b51      	ldr	r3, [pc, #324]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0049      	lsls	r1, r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe faef 	bl	8000ad8 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	e008      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002500:	f7fe faea 	bl	8000ad8 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e087      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4013      	ands	r3, r2
 800251c:	d0f0      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800251e:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	23c0      	movs	r3, #192	; 0xc0
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4013      	ands	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d034      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	23c0      	movs	r3, #192	; 0xc0
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4013      	ands	r3, r2
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d02c      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a3b      	ldr	r2, [pc, #236]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	4b38      	ldr	r3, [pc, #224]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0249      	lsls	r1, r1, #9
 8002554:	430a      	orrs	r2, r1
 8002556:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002558:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800255e:	4936      	ldr	r1, [pc, #216]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002560:	400a      	ands	r2, r1
 8002562:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002564:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fab1 	bl	8000ad8 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	e009      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe faac 	bl	8000ad8 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	4a2d      	ldr	r2, [pc, #180]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e048      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	2202      	movs	r2, #2
 8002596:	4013      	ands	r3, r2
 8002598:	d0f0      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a25      	ldr	r2, [pc, #148]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025aa:	430a      	orrs	r2, r1
 80025ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ae:	2317      	movs	r3, #23
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025be:	4920      	ldr	r1, [pc, #128]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	2203      	movs	r2, #3
 80025d4:	4393      	bics	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2220      	movs	r2, #32
 80025e8:	4013      	ands	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	2210      	movs	r2, #16
 80025f2:	4393      	bics	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4013      	ands	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	4393      	bics	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b006      	add	sp, #24
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	40021000 	.word	0x40021000
 8002630:	40007000 	.word	0x40007000
 8002634:	fffffcff 	.word	0xfffffcff
 8002638:	fffeffff 	.word	0xfffeffff
 800263c:	00001388 	.word	0x00001388
 8002640:	efffffff 	.word	0xefffffff

08002644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e044      	b.n	80026e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800265a:	2b00      	cmp	r3, #0
 800265c:	d107      	bne.n	800266e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2274      	movs	r2, #116	; 0x74
 8002662:	2100      	movs	r1, #0
 8002664:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f7fe f911 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2224      	movs	r2, #36	; 0x24
 8002672:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	438a      	bics	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	0018      	movs	r0, r3
 8002688:	f000 f8da 	bl	8002840 <UART_SetConfig>
 800268c:	0003      	movs	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e024      	b.n	80026e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 fa0d 	bl	8002ac0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	490d      	ldr	r1, [pc, #52]	; (80026e8 <HAL_UART_Init+0xa4>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	212a      	movs	r1, #42	; 0x2a
 80026c2:	438a      	bics	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 faa5 	bl	8002c28 <UART_CheckIdleState>
 80026de:	0003      	movs	r3, r0
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	ffffb7ff 	.word	0xffffb7ff

080026ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	1dbb      	adds	r3, r7, #6
 80026fa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002700:	2b20      	cmp	r3, #32
 8002702:	d000      	beq.n	8002706 <HAL_UART_Transmit+0x1a>
 8002704:	e096      	b.n	8002834 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_UART_Transmit+0x28>
 800270c:	1dbb      	adds	r3, r7, #6
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e08e      	b.n	8002836 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	015b      	lsls	r3, r3, #5
 8002720:	429a      	cmp	r2, r3
 8002722:	d109      	bne.n	8002738 <HAL_UART_Transmit+0x4c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2201      	movs	r2, #1
 8002730:	4013      	ands	r3, r2
 8002732:	d001      	beq.n	8002738 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e07e      	b.n	8002836 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2274      	movs	r2, #116	; 0x74
 800273c:	5c9b      	ldrb	r3, [r3, r2]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_UART_Transmit+0x5a>
 8002742:	2302      	movs	r3, #2
 8002744:	e077      	b.n	8002836 <HAL_UART_Transmit+0x14a>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2274      	movs	r2, #116	; 0x74
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	2100      	movs	r1, #0
 8002754:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2221      	movs	r2, #33	; 0x21
 800275a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800275c:	f7fe f9bc 	bl	8000ad8 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1dba      	adds	r2, r7, #6
 8002768:	2150      	movs	r1, #80	; 0x50
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1dba      	adds	r2, r7, #6
 8002772:	2152      	movs	r1, #82	; 0x52
 8002774:	8812      	ldrh	r2, [r2, #0]
 8002776:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	015b      	lsls	r3, r3, #5
 8002780:	429a      	cmp	r2, r3
 8002782:	d108      	bne.n	8002796 <HAL_UART_Transmit+0xaa>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d104      	bne.n	8002796 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	e003      	b.n	800279e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2274      	movs	r2, #116	; 0x74
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80027a6:	e02d      	b.n	8002804 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	0013      	movs	r3, r2
 80027b2:	2200      	movs	r2, #0
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	f000 fa7f 	bl	8002cb8 <UART_WaitOnFlagUntilTimeout>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e039      	b.n	8002836 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	881a      	ldrh	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	05d2      	lsls	r2, r2, #23
 80027d2:	0dd2      	lsrs	r2, r2, #23
 80027d4:	b292      	uxth	r2, r2
 80027d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	3302      	adds	r3, #2
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e008      	b.n	80027f2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	b292      	uxth	r2, r2
 80027ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2252      	movs	r2, #82	; 0x52
 80027f6:	5a9b      	ldrh	r3, [r3, r2]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b299      	uxth	r1, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2252      	movs	r2, #82	; 0x52
 8002802:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2252      	movs	r2, #82	; 0x52
 8002808:	5a9b      	ldrh	r3, [r3, r2]
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1cb      	bne.n	80027a8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	0013      	movs	r3, r2
 800281a:	2200      	movs	r2, #0
 800281c:	2140      	movs	r1, #64	; 0x40
 800281e:	f000 fa4b 	bl	8002cb8 <UART_WaitOnFlagUntilTimeout>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d001      	beq.n	800282a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e005      	b.n	8002836 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b008      	add	sp, #32
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002848:	231e      	movs	r3, #30
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a8d      	ldr	r2, [pc, #564]	; (8002aa4 <UART_SetConfig+0x264>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a88      	ldr	r2, [pc, #544]	; (8002aa8 <UART_SetConfig+0x268>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a7f      	ldr	r2, [pc, #508]	; (8002aac <UART_SetConfig+0x26c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a7b      	ldr	r2, [pc, #492]	; (8002ab0 <UART_SetConfig+0x270>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d127      	bne.n	8002916 <UART_SetConfig+0xd6>
 80028c6:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <UART_SetConfig+0x274>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	2203      	movs	r2, #3
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d00d      	beq.n	80028ee <UART_SetConfig+0xae>
 80028d2:	d81b      	bhi.n	800290c <UART_SetConfig+0xcc>
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d014      	beq.n	8002902 <UART_SetConfig+0xc2>
 80028d8:	d818      	bhi.n	800290c <UART_SetConfig+0xcc>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <UART_SetConfig+0xa4>
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d00a      	beq.n	80028f8 <UART_SetConfig+0xb8>
 80028e2:	e013      	b.n	800290c <UART_SetConfig+0xcc>
 80028e4:	231f      	movs	r3, #31
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e021      	b.n	8002932 <UART_SetConfig+0xf2>
 80028ee:	231f      	movs	r3, #31
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e01c      	b.n	8002932 <UART_SetConfig+0xf2>
 80028f8:	231f      	movs	r3, #31
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2204      	movs	r2, #4
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e017      	b.n	8002932 <UART_SetConfig+0xf2>
 8002902:	231f      	movs	r3, #31
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	2208      	movs	r2, #8
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	e012      	b.n	8002932 <UART_SetConfig+0xf2>
 800290c:	231f      	movs	r3, #31
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	2210      	movs	r2, #16
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e00d      	b.n	8002932 <UART_SetConfig+0xf2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a67      	ldr	r2, [pc, #412]	; (8002ab8 <UART_SetConfig+0x278>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d104      	bne.n	800292a <UART_SetConfig+0xea>
 8002920:	231f      	movs	r3, #31
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e003      	b.n	8002932 <UART_SetConfig+0xf2>
 800292a:	231f      	movs	r3, #31
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2210      	movs	r2, #16
 8002930:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	429a      	cmp	r2, r3
 800293c:	d15d      	bne.n	80029fa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800293e:	231f      	movs	r3, #31
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d015      	beq.n	8002974 <UART_SetConfig+0x134>
 8002948:	dc18      	bgt.n	800297c <UART_SetConfig+0x13c>
 800294a:	2b04      	cmp	r3, #4
 800294c:	d00d      	beq.n	800296a <UART_SetConfig+0x12a>
 800294e:	dc15      	bgt.n	800297c <UART_SetConfig+0x13c>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <UART_SetConfig+0x11a>
 8002954:	2b02      	cmp	r3, #2
 8002956:	d005      	beq.n	8002964 <UART_SetConfig+0x124>
 8002958:	e010      	b.n	800297c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800295a:	f7ff fd7f 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 800295e:	0003      	movs	r3, r0
 8002960:	61bb      	str	r3, [r7, #24]
        break;
 8002962:	e012      	b.n	800298a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002964:	4b55      	ldr	r3, [pc, #340]	; (8002abc <UART_SetConfig+0x27c>)
 8002966:	61bb      	str	r3, [r7, #24]
        break;
 8002968:	e00f      	b.n	800298a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800296a:	f7ff fd09 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800296e:	0003      	movs	r3, r0
 8002970:	61bb      	str	r3, [r7, #24]
        break;
 8002972:	e00a      	b.n	800298a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	61bb      	str	r3, [r7, #24]
        break;
 800297a:	e006      	b.n	800298a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002980:	231e      	movs	r3, #30
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
        break;
 8002988:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d100      	bne.n	8002992 <UART_SetConfig+0x152>
 8002990:	e07b      	b.n	8002a8a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	005a      	lsls	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	18d2      	adds	r2, r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	0019      	movs	r1, r3
 80029a4:	0010      	movs	r0, r2
 80029a6:	f7fd fbc1 	bl	800012c <__udivsi3>
 80029aa:	0003      	movs	r3, r0
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	d91c      	bls.n	80029f0 <UART_SetConfig+0x1b0>
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	025b      	lsls	r3, r3, #9
 80029bc:	429a      	cmp	r2, r3
 80029be:	d217      	bcs.n	80029f0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	200e      	movs	r0, #14
 80029c6:	183b      	adds	r3, r7, r0
 80029c8:	210f      	movs	r1, #15
 80029ca:	438a      	bics	r2, r1
 80029cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2207      	movs	r2, #7
 80029d6:	4013      	ands	r3, r2
 80029d8:	b299      	uxth	r1, r3
 80029da:	183b      	adds	r3, r7, r0
 80029dc:	183a      	adds	r2, r7, r0
 80029de:	8812      	ldrh	r2, [r2, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	183a      	adds	r2, r7, r0
 80029ea:	8812      	ldrh	r2, [r2, #0]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	e04c      	b.n	8002a8a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80029f0:	231e      	movs	r3, #30
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	e047      	b.n	8002a8a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029fa:	231f      	movs	r3, #31
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d015      	beq.n	8002a30 <UART_SetConfig+0x1f0>
 8002a04:	dc18      	bgt.n	8002a38 <UART_SetConfig+0x1f8>
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d00d      	beq.n	8002a26 <UART_SetConfig+0x1e6>
 8002a0a:	dc15      	bgt.n	8002a38 <UART_SetConfig+0x1f8>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <UART_SetConfig+0x1d6>
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d005      	beq.n	8002a20 <UART_SetConfig+0x1e0>
 8002a14:	e010      	b.n	8002a38 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a16:	f7ff fd21 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	61bb      	str	r3, [r7, #24]
        break;
 8002a1e:	e012      	b.n	8002a46 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a20:	4b26      	ldr	r3, [pc, #152]	; (8002abc <UART_SetConfig+0x27c>)
 8002a22:	61bb      	str	r3, [r7, #24]
        break;
 8002a24:	e00f      	b.n	8002a46 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a26:	f7ff fcab 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	61bb      	str	r3, [r7, #24]
        break;
 8002a2e:	e00a      	b.n	8002a46 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	61bb      	str	r3, [r7, #24]
        break;
 8002a36:	e006      	b.n	8002a46 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a3c:	231e      	movs	r3, #30
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
        break;
 8002a44:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01e      	beq.n	8002a8a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	085a      	lsrs	r2, r3, #1
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	18d2      	adds	r2, r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	0010      	movs	r0, r2
 8002a5e:	f7fd fb65 	bl	800012c <__udivsi3>
 8002a62:	0003      	movs	r3, r0
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	d909      	bls.n	8002a82 <UART_SetConfig+0x242>
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	025b      	lsls	r3, r3, #9
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d204      	bcs.n	8002a82 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	e003      	b.n	8002a8a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002a82:	231e      	movs	r3, #30
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a96:	231e      	movs	r3, #30
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	781b      	ldrb	r3, [r3, #0]
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b008      	add	sp, #32
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	ffff69f3 	.word	0xffff69f3
 8002aa8:	ffffcfff 	.word	0xffffcfff
 8002aac:	fffff4ff 	.word	0xfffff4ff
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40004400 	.word	0x40004400
 8002abc:	007a1200 	.word	0x007a1200

08002ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	2201      	movs	r2, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d00b      	beq.n	8002aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <UART_AdvFeatureConfig+0x144>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2202      	movs	r2, #2
 8002af0:	4013      	ands	r3, r2
 8002af2:	d00b      	beq.n	8002b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a43      	ldr	r2, [pc, #268]	; (8002c08 <UART_AdvFeatureConfig+0x148>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	0019      	movs	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	2204      	movs	r2, #4
 8002b12:	4013      	ands	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a3b      	ldr	r2, [pc, #236]	; (8002c0c <UART_AdvFeatureConfig+0x14c>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2208      	movs	r2, #8
 8002b34:	4013      	ands	r3, r2
 8002b36:	d00b      	beq.n	8002b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <UART_AdvFeatureConfig+0x150>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	2210      	movs	r2, #16
 8002b56:	4013      	ands	r3, r2
 8002b58:	d00b      	beq.n	8002b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a2c      	ldr	r2, [pc, #176]	; (8002c14 <UART_AdvFeatureConfig+0x154>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2220      	movs	r2, #32
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <UART_AdvFeatureConfig+0x158>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	0019      	movs	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2240      	movs	r2, #64	; 0x40
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <UART_AdvFeatureConfig+0x15c>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	035b      	lsls	r3, r3, #13
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d10b      	bne.n	8002bda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <UART_AdvFeatureConfig+0x160>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	4013      	ands	r3, r2
 8002be2:	d00b      	beq.n	8002bfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <UART_AdvFeatureConfig+0x164>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
  }
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	fffdffff 	.word	0xfffdffff
 8002c08:	fffeffff 	.word	0xfffeffff
 8002c0c:	fffbffff 	.word	0xfffbffff
 8002c10:	ffff7fff 	.word	0xffff7fff
 8002c14:	ffffefff 	.word	0xffffefff
 8002c18:	ffffdfff 	.word	0xffffdfff
 8002c1c:	ffefffff 	.word	0xffefffff
 8002c20:	ff9fffff 	.word	0xff9fffff
 8002c24:	fff7ffff 	.word	0xfff7ffff

08002c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	2100      	movs	r1, #0
 8002c36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c38:	f7fd ff4e 	bl	8000ad8 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2208      	movs	r2, #8
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d10c      	bne.n	8002c68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	0391      	lsls	r1, r2, #14
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <UART_CheckIdleState+0x8c>)
 8002c58:	9200      	str	r2, [sp, #0]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f000 f82c 	bl	8002cb8 <UART_WaitOnFlagUntilTimeout>
 8002c60:	1e03      	subs	r3, r0, #0
 8002c62:	d001      	beq.n	8002c68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e021      	b.n	8002cac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d10c      	bne.n	8002c90 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2280      	movs	r2, #128	; 0x80
 8002c7a:	03d1      	lsls	r1, r2, #15
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <UART_CheckIdleState+0x8c>)
 8002c80:	9200      	str	r2, [sp, #0]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f000 f818 	bl	8002cb8 <UART_WaitOnFlagUntilTimeout>
 8002c88:	1e03      	subs	r3, r0, #0
 8002c8a:	d001      	beq.n	8002c90 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e00d      	b.n	8002cac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2274      	movs	r2, #116	; 0x74
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b004      	add	sp, #16
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	01ffffff 	.word	0x01ffffff

08002cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b094      	sub	sp, #80	; 0x50
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	1dfb      	adds	r3, r7, #7
 8002cc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc8:	e0a3      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ccc:	3301      	adds	r3, #1
 8002cce:	d100      	bne.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002cd0:	e09f      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7fd ff01 	bl	8000ad8 <HAL_GetTick>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d13d      	bne.n	8002d64 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	f383 8810 	msr	PRIMASK, r3
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	494c      	ldr	r1, [pc, #304]	; (8002e3c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	f383 8810 	msr	PRIMASK, r3
}
 8002d18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40
 8002d24:	2301      	movs	r3, #1
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	f383 8810 	msr	PRIMASK, r3
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2274      	movs	r2, #116	; 0x74
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e067      	b.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d050      	beq.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d146      	bne.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d92:	613b      	str	r3, [r7, #16]
  return(result);
 8002d94:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d98:	2301      	movs	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4923      	ldr	r1, [pc, #140]	; (8002e3c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002dc6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dca:	2301      	movs	r3, #1
 8002dcc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2101      	movs	r1, #1
 8002de2:	438a      	bics	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	2120      	movs	r1, #32
 8002e04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2274      	movs	r2, #116	; 0x74
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e010      	b.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	425a      	negs	r2, r3
 8002e22:	4153      	adcs	r3, r2
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	001a      	movs	r2, r3
 8002e28:	1dfb      	adds	r3, r7, #7
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d100      	bne.n	8002e32 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002e30:	e74b      	b.n	8002cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b014      	add	sp, #80	; 0x50
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	fffffe5f 	.word	0xfffffe5f

08002e40 <__errno>:
 8002e40:	4b01      	ldr	r3, [pc, #4]	; (8002e48 <__errno+0x8>)
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	4770      	bx	lr
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	2000000c 	.word	0x2000000c

08002e4c <__libc_init_array>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	2600      	movs	r6, #0
 8002e50:	4d0c      	ldr	r5, [pc, #48]	; (8002e84 <__libc_init_array+0x38>)
 8002e52:	4c0d      	ldr	r4, [pc, #52]	; (8002e88 <__libc_init_array+0x3c>)
 8002e54:	1b64      	subs	r4, r4, r5
 8002e56:	10a4      	asrs	r4, r4, #2
 8002e58:	42a6      	cmp	r6, r4
 8002e5a:	d109      	bne.n	8002e70 <__libc_init_array+0x24>
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	f000 fc8b 	bl	8003778 <_init>
 8002e62:	4d0a      	ldr	r5, [pc, #40]	; (8002e8c <__libc_init_array+0x40>)
 8002e64:	4c0a      	ldr	r4, [pc, #40]	; (8002e90 <__libc_init_array+0x44>)
 8002e66:	1b64      	subs	r4, r4, r5
 8002e68:	10a4      	asrs	r4, r4, #2
 8002e6a:	42a6      	cmp	r6, r4
 8002e6c:	d105      	bne.n	8002e7a <__libc_init_array+0x2e>
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	00b3      	lsls	r3, r6, #2
 8002e72:	58eb      	ldr	r3, [r5, r3]
 8002e74:	4798      	blx	r3
 8002e76:	3601      	adds	r6, #1
 8002e78:	e7ee      	b.n	8002e58 <__libc_init_array+0xc>
 8002e7a:	00b3      	lsls	r3, r6, #2
 8002e7c:	58eb      	ldr	r3, [r5, r3]
 8002e7e:	4798      	blx	r3
 8002e80:	3601      	adds	r6, #1
 8002e82:	e7f2      	b.n	8002e6a <__libc_init_array+0x1e>
 8002e84:	080038f8 	.word	0x080038f8
 8002e88:	080038f8 	.word	0x080038f8
 8002e8c:	080038f8 	.word	0x080038f8
 8002e90:	080038fc 	.word	0x080038fc

08002e94 <memset>:
 8002e94:	0003      	movs	r3, r0
 8002e96:	1882      	adds	r2, r0, r2
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	7019      	strb	r1, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <siprintf>:
 8002ea4:	b40e      	push	{r1, r2, r3}
 8002ea6:	b500      	push	{lr}
 8002ea8:	490b      	ldr	r1, [pc, #44]	; (8002ed8 <siprintf+0x34>)
 8002eaa:	b09c      	sub	sp, #112	; 0x70
 8002eac:	ab1d      	add	r3, sp, #116	; 0x74
 8002eae:	9002      	str	r0, [sp, #8]
 8002eb0:	9006      	str	r0, [sp, #24]
 8002eb2:	9107      	str	r1, [sp, #28]
 8002eb4:	9104      	str	r1, [sp, #16]
 8002eb6:	4809      	ldr	r0, [pc, #36]	; (8002edc <siprintf+0x38>)
 8002eb8:	4909      	ldr	r1, [pc, #36]	; (8002ee0 <siprintf+0x3c>)
 8002eba:	cb04      	ldmia	r3!, {r2}
 8002ebc:	9105      	str	r1, [sp, #20]
 8002ebe:	6800      	ldr	r0, [r0, #0]
 8002ec0:	a902      	add	r1, sp, #8
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	f000 f870 	bl	8002fa8 <_svfiprintf_r>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9a02      	ldr	r2, [sp, #8]
 8002ecc:	7013      	strb	r3, [r2, #0]
 8002ece:	b01c      	add	sp, #112	; 0x70
 8002ed0:	bc08      	pop	{r3}
 8002ed2:	b003      	add	sp, #12
 8002ed4:	4718      	bx	r3
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	7fffffff 	.word	0x7fffffff
 8002edc:	2000000c 	.word	0x2000000c
 8002ee0:	ffff0208 	.word	0xffff0208

08002ee4 <__ssputs_r>:
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	688e      	ldr	r6, [r1, #8]
 8002ee8:	b085      	sub	sp, #20
 8002eea:	0007      	movs	r7, r0
 8002eec:	000c      	movs	r4, r1
 8002eee:	9203      	str	r2, [sp, #12]
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	429e      	cmp	r6, r3
 8002ef4:	d83c      	bhi.n	8002f70 <__ssputs_r+0x8c>
 8002ef6:	2390      	movs	r3, #144	; 0x90
 8002ef8:	898a      	ldrh	r2, [r1, #12]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	421a      	tst	r2, r3
 8002efe:	d034      	beq.n	8002f6a <__ssputs_r+0x86>
 8002f00:	6909      	ldr	r1, [r1, #16]
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	6960      	ldr	r0, [r4, #20]
 8002f06:	1a5b      	subs	r3, r3, r1
 8002f08:	9302      	str	r3, [sp, #8]
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	4343      	muls	r3, r0
 8002f0e:	0fdd      	lsrs	r5, r3, #31
 8002f10:	18ed      	adds	r5, r5, r3
 8002f12:	9b01      	ldr	r3, [sp, #4]
 8002f14:	9802      	ldr	r0, [sp, #8]
 8002f16:	3301      	adds	r3, #1
 8002f18:	181b      	adds	r3, r3, r0
 8002f1a:	106d      	asrs	r5, r5, #1
 8002f1c:	42ab      	cmp	r3, r5
 8002f1e:	d900      	bls.n	8002f22 <__ssputs_r+0x3e>
 8002f20:	001d      	movs	r5, r3
 8002f22:	0553      	lsls	r3, r2, #21
 8002f24:	d532      	bpl.n	8002f8c <__ssputs_r+0xa8>
 8002f26:	0029      	movs	r1, r5
 8002f28:	0038      	movs	r0, r7
 8002f2a:	f000 fb53 	bl	80035d4 <_malloc_r>
 8002f2e:	1e06      	subs	r6, r0, #0
 8002f30:	d109      	bne.n	8002f46 <__ssputs_r+0x62>
 8002f32:	230c      	movs	r3, #12
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	2340      	movs	r3, #64	; 0x40
 8002f38:	2001      	movs	r0, #1
 8002f3a:	89a2      	ldrh	r2, [r4, #12]
 8002f3c:	4240      	negs	r0, r0
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	81a3      	strh	r3, [r4, #12]
 8002f42:	b005      	add	sp, #20
 8002f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f46:	9a02      	ldr	r2, [sp, #8]
 8002f48:	6921      	ldr	r1, [r4, #16]
 8002f4a:	f000 faba 	bl	80034c2 <memcpy>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <__ssputs_r+0xc0>)
 8002f52:	401a      	ands	r2, r3
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	4313      	orrs	r3, r2
 8002f58:	81a3      	strh	r3, [r4, #12]
 8002f5a:	9b02      	ldr	r3, [sp, #8]
 8002f5c:	6126      	str	r6, [r4, #16]
 8002f5e:	18f6      	adds	r6, r6, r3
 8002f60:	6026      	str	r6, [r4, #0]
 8002f62:	6165      	str	r5, [r4, #20]
 8002f64:	9e01      	ldr	r6, [sp, #4]
 8002f66:	1aed      	subs	r5, r5, r3
 8002f68:	60a5      	str	r5, [r4, #8]
 8002f6a:	9b01      	ldr	r3, [sp, #4]
 8002f6c:	429e      	cmp	r6, r3
 8002f6e:	d900      	bls.n	8002f72 <__ssputs_r+0x8e>
 8002f70:	9e01      	ldr	r6, [sp, #4]
 8002f72:	0032      	movs	r2, r6
 8002f74:	9903      	ldr	r1, [sp, #12]
 8002f76:	6820      	ldr	r0, [r4, #0]
 8002f78:	f000 faac 	bl	80034d4 <memmove>
 8002f7c:	68a3      	ldr	r3, [r4, #8]
 8002f7e:	2000      	movs	r0, #0
 8002f80:	1b9b      	subs	r3, r3, r6
 8002f82:	60a3      	str	r3, [r4, #8]
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	199e      	adds	r6, r3, r6
 8002f88:	6026      	str	r6, [r4, #0]
 8002f8a:	e7da      	b.n	8002f42 <__ssputs_r+0x5e>
 8002f8c:	002a      	movs	r2, r5
 8002f8e:	0038      	movs	r0, r7
 8002f90:	f000 fb96 	bl	80036c0 <_realloc_r>
 8002f94:	1e06      	subs	r6, r0, #0
 8002f96:	d1e0      	bne.n	8002f5a <__ssputs_r+0x76>
 8002f98:	0038      	movs	r0, r7
 8002f9a:	6921      	ldr	r1, [r4, #16]
 8002f9c:	f000 faae 	bl	80034fc <_free_r>
 8002fa0:	e7c7      	b.n	8002f32 <__ssputs_r+0x4e>
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	fffffb7f 	.word	0xfffffb7f

08002fa8 <_svfiprintf_r>:
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	b0a1      	sub	sp, #132	; 0x84
 8002fac:	9003      	str	r0, [sp, #12]
 8002fae:	001d      	movs	r5, r3
 8002fb0:	898b      	ldrh	r3, [r1, #12]
 8002fb2:	000f      	movs	r7, r1
 8002fb4:	0016      	movs	r6, r2
 8002fb6:	061b      	lsls	r3, r3, #24
 8002fb8:	d511      	bpl.n	8002fde <_svfiprintf_r+0x36>
 8002fba:	690b      	ldr	r3, [r1, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10e      	bne.n	8002fde <_svfiprintf_r+0x36>
 8002fc0:	2140      	movs	r1, #64	; 0x40
 8002fc2:	f000 fb07 	bl	80035d4 <_malloc_r>
 8002fc6:	6038      	str	r0, [r7, #0]
 8002fc8:	6138      	str	r0, [r7, #16]
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	d105      	bne.n	8002fda <_svfiprintf_r+0x32>
 8002fce:	230c      	movs	r3, #12
 8002fd0:	9a03      	ldr	r2, [sp, #12]
 8002fd2:	3801      	subs	r0, #1
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	b021      	add	sp, #132	; 0x84
 8002fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fda:	2340      	movs	r3, #64	; 0x40
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	ac08      	add	r4, sp, #32
 8002fe2:	6163      	str	r3, [r4, #20]
 8002fe4:	3320      	adds	r3, #32
 8002fe6:	7663      	strb	r3, [r4, #25]
 8002fe8:	3310      	adds	r3, #16
 8002fea:	76a3      	strb	r3, [r4, #26]
 8002fec:	9507      	str	r5, [sp, #28]
 8002fee:	0035      	movs	r5, r6
 8002ff0:	782b      	ldrb	r3, [r5, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <_svfiprintf_r+0x52>
 8002ff6:	2b25      	cmp	r3, #37	; 0x25
 8002ff8:	d147      	bne.n	800308a <_svfiprintf_r+0xe2>
 8002ffa:	1bab      	subs	r3, r5, r6
 8002ffc:	9305      	str	r3, [sp, #20]
 8002ffe:	42b5      	cmp	r5, r6
 8003000:	d00c      	beq.n	800301c <_svfiprintf_r+0x74>
 8003002:	0032      	movs	r2, r6
 8003004:	0039      	movs	r1, r7
 8003006:	9803      	ldr	r0, [sp, #12]
 8003008:	f7ff ff6c 	bl	8002ee4 <__ssputs_r>
 800300c:	1c43      	adds	r3, r0, #1
 800300e:	d100      	bne.n	8003012 <_svfiprintf_r+0x6a>
 8003010:	e0ae      	b.n	8003170 <_svfiprintf_r+0x1c8>
 8003012:	6962      	ldr	r2, [r4, #20]
 8003014:	9b05      	ldr	r3, [sp, #20]
 8003016:	4694      	mov	ip, r2
 8003018:	4463      	add	r3, ip
 800301a:	6163      	str	r3, [r4, #20]
 800301c:	782b      	ldrb	r3, [r5, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d100      	bne.n	8003024 <_svfiprintf_r+0x7c>
 8003022:	e0a5      	b.n	8003170 <_svfiprintf_r+0x1c8>
 8003024:	2201      	movs	r2, #1
 8003026:	2300      	movs	r3, #0
 8003028:	4252      	negs	r2, r2
 800302a:	6062      	str	r2, [r4, #4]
 800302c:	a904      	add	r1, sp, #16
 800302e:	3254      	adds	r2, #84	; 0x54
 8003030:	1852      	adds	r2, r2, r1
 8003032:	1c6e      	adds	r6, r5, #1
 8003034:	6023      	str	r3, [r4, #0]
 8003036:	60e3      	str	r3, [r4, #12]
 8003038:	60a3      	str	r3, [r4, #8]
 800303a:	7013      	strb	r3, [r2, #0]
 800303c:	65a3      	str	r3, [r4, #88]	; 0x58
 800303e:	2205      	movs	r2, #5
 8003040:	7831      	ldrb	r1, [r6, #0]
 8003042:	4854      	ldr	r0, [pc, #336]	; (8003194 <_svfiprintf_r+0x1ec>)
 8003044:	f000 fa32 	bl	80034ac <memchr>
 8003048:	1c75      	adds	r5, r6, #1
 800304a:	2800      	cmp	r0, #0
 800304c:	d11f      	bne.n	800308e <_svfiprintf_r+0xe6>
 800304e:	6822      	ldr	r2, [r4, #0]
 8003050:	06d3      	lsls	r3, r2, #27
 8003052:	d504      	bpl.n	800305e <_svfiprintf_r+0xb6>
 8003054:	2353      	movs	r3, #83	; 0x53
 8003056:	a904      	add	r1, sp, #16
 8003058:	185b      	adds	r3, r3, r1
 800305a:	2120      	movs	r1, #32
 800305c:	7019      	strb	r1, [r3, #0]
 800305e:	0713      	lsls	r3, r2, #28
 8003060:	d504      	bpl.n	800306c <_svfiprintf_r+0xc4>
 8003062:	2353      	movs	r3, #83	; 0x53
 8003064:	a904      	add	r1, sp, #16
 8003066:	185b      	adds	r3, r3, r1
 8003068:	212b      	movs	r1, #43	; 0x2b
 800306a:	7019      	strb	r1, [r3, #0]
 800306c:	7833      	ldrb	r3, [r6, #0]
 800306e:	2b2a      	cmp	r3, #42	; 0x2a
 8003070:	d016      	beq.n	80030a0 <_svfiprintf_r+0xf8>
 8003072:	0035      	movs	r5, r6
 8003074:	2100      	movs	r1, #0
 8003076:	200a      	movs	r0, #10
 8003078:	68e3      	ldr	r3, [r4, #12]
 800307a:	782a      	ldrb	r2, [r5, #0]
 800307c:	1c6e      	adds	r6, r5, #1
 800307e:	3a30      	subs	r2, #48	; 0x30
 8003080:	2a09      	cmp	r2, #9
 8003082:	d94e      	bls.n	8003122 <_svfiprintf_r+0x17a>
 8003084:	2900      	cmp	r1, #0
 8003086:	d111      	bne.n	80030ac <_svfiprintf_r+0x104>
 8003088:	e017      	b.n	80030ba <_svfiprintf_r+0x112>
 800308a:	3501      	adds	r5, #1
 800308c:	e7b0      	b.n	8002ff0 <_svfiprintf_r+0x48>
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <_svfiprintf_r+0x1ec>)
 8003090:	6822      	ldr	r2, [r4, #0]
 8003092:	1ac0      	subs	r0, r0, r3
 8003094:	2301      	movs	r3, #1
 8003096:	4083      	lsls	r3, r0
 8003098:	4313      	orrs	r3, r2
 800309a:	002e      	movs	r6, r5
 800309c:	6023      	str	r3, [r4, #0]
 800309e:	e7ce      	b.n	800303e <_svfiprintf_r+0x96>
 80030a0:	9b07      	ldr	r3, [sp, #28]
 80030a2:	1d19      	adds	r1, r3, #4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	9107      	str	r1, [sp, #28]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	db01      	blt.n	80030b0 <_svfiprintf_r+0x108>
 80030ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80030ae:	e004      	b.n	80030ba <_svfiprintf_r+0x112>
 80030b0:	425b      	negs	r3, r3
 80030b2:	60e3      	str	r3, [r4, #12]
 80030b4:	2302      	movs	r3, #2
 80030b6:	4313      	orrs	r3, r2
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	782b      	ldrb	r3, [r5, #0]
 80030bc:	2b2e      	cmp	r3, #46	; 0x2e
 80030be:	d10a      	bne.n	80030d6 <_svfiprintf_r+0x12e>
 80030c0:	786b      	ldrb	r3, [r5, #1]
 80030c2:	2b2a      	cmp	r3, #42	; 0x2a
 80030c4:	d135      	bne.n	8003132 <_svfiprintf_r+0x18a>
 80030c6:	9b07      	ldr	r3, [sp, #28]
 80030c8:	3502      	adds	r5, #2
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	9207      	str	r2, [sp, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db2b      	blt.n	800312c <_svfiprintf_r+0x184>
 80030d4:	9309      	str	r3, [sp, #36]	; 0x24
 80030d6:	4e30      	ldr	r6, [pc, #192]	; (8003198 <_svfiprintf_r+0x1f0>)
 80030d8:	2203      	movs	r2, #3
 80030da:	0030      	movs	r0, r6
 80030dc:	7829      	ldrb	r1, [r5, #0]
 80030de:	f000 f9e5 	bl	80034ac <memchr>
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d006      	beq.n	80030f4 <_svfiprintf_r+0x14c>
 80030e6:	2340      	movs	r3, #64	; 0x40
 80030e8:	1b80      	subs	r0, r0, r6
 80030ea:	4083      	lsls	r3, r0
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	3501      	adds	r5, #1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	7829      	ldrb	r1, [r5, #0]
 80030f6:	2206      	movs	r2, #6
 80030f8:	4828      	ldr	r0, [pc, #160]	; (800319c <_svfiprintf_r+0x1f4>)
 80030fa:	1c6e      	adds	r6, r5, #1
 80030fc:	7621      	strb	r1, [r4, #24]
 80030fe:	f000 f9d5 	bl	80034ac <memchr>
 8003102:	2800      	cmp	r0, #0
 8003104:	d03c      	beq.n	8003180 <_svfiprintf_r+0x1d8>
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <_svfiprintf_r+0x1f8>)
 8003108:	2b00      	cmp	r3, #0
 800310a:	d125      	bne.n	8003158 <_svfiprintf_r+0x1b0>
 800310c:	2207      	movs	r2, #7
 800310e:	9b07      	ldr	r3, [sp, #28]
 8003110:	3307      	adds	r3, #7
 8003112:	4393      	bics	r3, r2
 8003114:	3308      	adds	r3, #8
 8003116:	9307      	str	r3, [sp, #28]
 8003118:	6963      	ldr	r3, [r4, #20]
 800311a:	9a04      	ldr	r2, [sp, #16]
 800311c:	189b      	adds	r3, r3, r2
 800311e:	6163      	str	r3, [r4, #20]
 8003120:	e765      	b.n	8002fee <_svfiprintf_r+0x46>
 8003122:	4343      	muls	r3, r0
 8003124:	0035      	movs	r5, r6
 8003126:	2101      	movs	r1, #1
 8003128:	189b      	adds	r3, r3, r2
 800312a:	e7a6      	b.n	800307a <_svfiprintf_r+0xd2>
 800312c:	2301      	movs	r3, #1
 800312e:	425b      	negs	r3, r3
 8003130:	e7d0      	b.n	80030d4 <_svfiprintf_r+0x12c>
 8003132:	2300      	movs	r3, #0
 8003134:	200a      	movs	r0, #10
 8003136:	001a      	movs	r2, r3
 8003138:	3501      	adds	r5, #1
 800313a:	6063      	str	r3, [r4, #4]
 800313c:	7829      	ldrb	r1, [r5, #0]
 800313e:	1c6e      	adds	r6, r5, #1
 8003140:	3930      	subs	r1, #48	; 0x30
 8003142:	2909      	cmp	r1, #9
 8003144:	d903      	bls.n	800314e <_svfiprintf_r+0x1a6>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0c5      	beq.n	80030d6 <_svfiprintf_r+0x12e>
 800314a:	9209      	str	r2, [sp, #36]	; 0x24
 800314c:	e7c3      	b.n	80030d6 <_svfiprintf_r+0x12e>
 800314e:	4342      	muls	r2, r0
 8003150:	0035      	movs	r5, r6
 8003152:	2301      	movs	r3, #1
 8003154:	1852      	adds	r2, r2, r1
 8003156:	e7f1      	b.n	800313c <_svfiprintf_r+0x194>
 8003158:	ab07      	add	r3, sp, #28
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	003a      	movs	r2, r7
 800315e:	0021      	movs	r1, r4
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <_svfiprintf_r+0x1fc>)
 8003162:	9803      	ldr	r0, [sp, #12]
 8003164:	e000      	b.n	8003168 <_svfiprintf_r+0x1c0>
 8003166:	bf00      	nop
 8003168:	9004      	str	r0, [sp, #16]
 800316a:	9b04      	ldr	r3, [sp, #16]
 800316c:	3301      	adds	r3, #1
 800316e:	d1d3      	bne.n	8003118 <_svfiprintf_r+0x170>
 8003170:	89bb      	ldrh	r3, [r7, #12]
 8003172:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003174:	065b      	lsls	r3, r3, #25
 8003176:	d400      	bmi.n	800317a <_svfiprintf_r+0x1d2>
 8003178:	e72d      	b.n	8002fd6 <_svfiprintf_r+0x2e>
 800317a:	2001      	movs	r0, #1
 800317c:	4240      	negs	r0, r0
 800317e:	e72a      	b.n	8002fd6 <_svfiprintf_r+0x2e>
 8003180:	ab07      	add	r3, sp, #28
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	003a      	movs	r2, r7
 8003186:	0021      	movs	r1, r4
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <_svfiprintf_r+0x1fc>)
 800318a:	9803      	ldr	r0, [sp, #12]
 800318c:	f000 f87c 	bl	8003288 <_printf_i>
 8003190:	e7ea      	b.n	8003168 <_svfiprintf_r+0x1c0>
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	080038c4 	.word	0x080038c4
 8003198:	080038ca 	.word	0x080038ca
 800319c:	080038ce 	.word	0x080038ce
 80031a0:	00000000 	.word	0x00000000
 80031a4:	08002ee5 	.word	0x08002ee5

080031a8 <_printf_common>:
 80031a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031aa:	0015      	movs	r5, r2
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	688a      	ldr	r2, [r1, #8]
 80031b0:	690b      	ldr	r3, [r1, #16]
 80031b2:	000c      	movs	r4, r1
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	4293      	cmp	r3, r2
 80031b8:	da00      	bge.n	80031bc <_printf_common+0x14>
 80031ba:	0013      	movs	r3, r2
 80031bc:	0022      	movs	r2, r4
 80031be:	602b      	str	r3, [r5, #0]
 80031c0:	3243      	adds	r2, #67	; 0x43
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	2a00      	cmp	r2, #0
 80031c6:	d001      	beq.n	80031cc <_printf_common+0x24>
 80031c8:	3301      	adds	r3, #1
 80031ca:	602b      	str	r3, [r5, #0]
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	069b      	lsls	r3, r3, #26
 80031d0:	d502      	bpl.n	80031d8 <_printf_common+0x30>
 80031d2:	682b      	ldr	r3, [r5, #0]
 80031d4:	3302      	adds	r3, #2
 80031d6:	602b      	str	r3, [r5, #0]
 80031d8:	6822      	ldr	r2, [r4, #0]
 80031da:	2306      	movs	r3, #6
 80031dc:	0017      	movs	r7, r2
 80031de:	401f      	ands	r7, r3
 80031e0:	421a      	tst	r2, r3
 80031e2:	d027      	beq.n	8003234 <_printf_common+0x8c>
 80031e4:	0023      	movs	r3, r4
 80031e6:	3343      	adds	r3, #67	; 0x43
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	1e5a      	subs	r2, r3, #1
 80031ec:	4193      	sbcs	r3, r2
 80031ee:	6822      	ldr	r2, [r4, #0]
 80031f0:	0692      	lsls	r2, r2, #26
 80031f2:	d430      	bmi.n	8003256 <_printf_common+0xae>
 80031f4:	0022      	movs	r2, r4
 80031f6:	9901      	ldr	r1, [sp, #4]
 80031f8:	9800      	ldr	r0, [sp, #0]
 80031fa:	9e08      	ldr	r6, [sp, #32]
 80031fc:	3243      	adds	r2, #67	; 0x43
 80031fe:	47b0      	blx	r6
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d025      	beq.n	8003250 <_printf_common+0xa8>
 8003204:	2306      	movs	r3, #6
 8003206:	6820      	ldr	r0, [r4, #0]
 8003208:	682a      	ldr	r2, [r5, #0]
 800320a:	68e1      	ldr	r1, [r4, #12]
 800320c:	2500      	movs	r5, #0
 800320e:	4003      	ands	r3, r0
 8003210:	2b04      	cmp	r3, #4
 8003212:	d103      	bne.n	800321c <_printf_common+0x74>
 8003214:	1a8d      	subs	r5, r1, r2
 8003216:	43eb      	mvns	r3, r5
 8003218:	17db      	asrs	r3, r3, #31
 800321a:	401d      	ands	r5, r3
 800321c:	68a3      	ldr	r3, [r4, #8]
 800321e:	6922      	ldr	r2, [r4, #16]
 8003220:	4293      	cmp	r3, r2
 8003222:	dd01      	ble.n	8003228 <_printf_common+0x80>
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	18ed      	adds	r5, r5, r3
 8003228:	2700      	movs	r7, #0
 800322a:	42bd      	cmp	r5, r7
 800322c:	d120      	bne.n	8003270 <_printf_common+0xc8>
 800322e:	2000      	movs	r0, #0
 8003230:	e010      	b.n	8003254 <_printf_common+0xac>
 8003232:	3701      	adds	r7, #1
 8003234:	68e3      	ldr	r3, [r4, #12]
 8003236:	682a      	ldr	r2, [r5, #0]
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	42bb      	cmp	r3, r7
 800323c:	ddd2      	ble.n	80031e4 <_printf_common+0x3c>
 800323e:	0022      	movs	r2, r4
 8003240:	2301      	movs	r3, #1
 8003242:	9901      	ldr	r1, [sp, #4]
 8003244:	9800      	ldr	r0, [sp, #0]
 8003246:	9e08      	ldr	r6, [sp, #32]
 8003248:	3219      	adds	r2, #25
 800324a:	47b0      	blx	r6
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d1f0      	bne.n	8003232 <_printf_common+0x8a>
 8003250:	2001      	movs	r0, #1
 8003252:	4240      	negs	r0, r0
 8003254:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003256:	2030      	movs	r0, #48	; 0x30
 8003258:	18e1      	adds	r1, r4, r3
 800325a:	3143      	adds	r1, #67	; 0x43
 800325c:	7008      	strb	r0, [r1, #0]
 800325e:	0021      	movs	r1, r4
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	3145      	adds	r1, #69	; 0x45
 8003264:	7809      	ldrb	r1, [r1, #0]
 8003266:	18a2      	adds	r2, r4, r2
 8003268:	3243      	adds	r2, #67	; 0x43
 800326a:	3302      	adds	r3, #2
 800326c:	7011      	strb	r1, [r2, #0]
 800326e:	e7c1      	b.n	80031f4 <_printf_common+0x4c>
 8003270:	0022      	movs	r2, r4
 8003272:	2301      	movs	r3, #1
 8003274:	9901      	ldr	r1, [sp, #4]
 8003276:	9800      	ldr	r0, [sp, #0]
 8003278:	9e08      	ldr	r6, [sp, #32]
 800327a:	321a      	adds	r2, #26
 800327c:	47b0      	blx	r6
 800327e:	1c43      	adds	r3, r0, #1
 8003280:	d0e6      	beq.n	8003250 <_printf_common+0xa8>
 8003282:	3701      	adds	r7, #1
 8003284:	e7d1      	b.n	800322a <_printf_common+0x82>
	...

08003288 <_printf_i>:
 8003288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328a:	b08b      	sub	sp, #44	; 0x2c
 800328c:	9206      	str	r2, [sp, #24]
 800328e:	000a      	movs	r2, r1
 8003290:	3243      	adds	r2, #67	; 0x43
 8003292:	9307      	str	r3, [sp, #28]
 8003294:	9005      	str	r0, [sp, #20]
 8003296:	9204      	str	r2, [sp, #16]
 8003298:	7e0a      	ldrb	r2, [r1, #24]
 800329a:	000c      	movs	r4, r1
 800329c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800329e:	2a78      	cmp	r2, #120	; 0x78
 80032a0:	d807      	bhi.n	80032b2 <_printf_i+0x2a>
 80032a2:	2a62      	cmp	r2, #98	; 0x62
 80032a4:	d809      	bhi.n	80032ba <_printf_i+0x32>
 80032a6:	2a00      	cmp	r2, #0
 80032a8:	d100      	bne.n	80032ac <_printf_i+0x24>
 80032aa:	e0c1      	b.n	8003430 <_printf_i+0x1a8>
 80032ac:	2a58      	cmp	r2, #88	; 0x58
 80032ae:	d100      	bne.n	80032b2 <_printf_i+0x2a>
 80032b0:	e08c      	b.n	80033cc <_printf_i+0x144>
 80032b2:	0026      	movs	r6, r4
 80032b4:	3642      	adds	r6, #66	; 0x42
 80032b6:	7032      	strb	r2, [r6, #0]
 80032b8:	e022      	b.n	8003300 <_printf_i+0x78>
 80032ba:	0010      	movs	r0, r2
 80032bc:	3863      	subs	r0, #99	; 0x63
 80032be:	2815      	cmp	r0, #21
 80032c0:	d8f7      	bhi.n	80032b2 <_printf_i+0x2a>
 80032c2:	f7fc ff29 	bl	8000118 <__gnu_thumb1_case_shi>
 80032c6:	0016      	.short	0x0016
 80032c8:	fff6001f 	.word	0xfff6001f
 80032cc:	fff6fff6 	.word	0xfff6fff6
 80032d0:	001ffff6 	.word	0x001ffff6
 80032d4:	fff6fff6 	.word	0xfff6fff6
 80032d8:	fff6fff6 	.word	0xfff6fff6
 80032dc:	003600a8 	.word	0x003600a8
 80032e0:	fff6009a 	.word	0xfff6009a
 80032e4:	00b9fff6 	.word	0x00b9fff6
 80032e8:	0036fff6 	.word	0x0036fff6
 80032ec:	fff6fff6 	.word	0xfff6fff6
 80032f0:	009e      	.short	0x009e
 80032f2:	0026      	movs	r6, r4
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	3642      	adds	r6, #66	; 0x42
 80032f8:	1d11      	adds	r1, r2, #4
 80032fa:	6019      	str	r1, [r3, #0]
 80032fc:	6813      	ldr	r3, [r2, #0]
 80032fe:	7033      	strb	r3, [r6, #0]
 8003300:	2301      	movs	r3, #1
 8003302:	e0a7      	b.n	8003454 <_printf_i+0x1cc>
 8003304:	6808      	ldr	r0, [r1, #0]
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	1d0a      	adds	r2, r1, #4
 800330a:	0605      	lsls	r5, r0, #24
 800330c:	d50b      	bpl.n	8003326 <_printf_i+0x9e>
 800330e:	680d      	ldr	r5, [r1, #0]
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	2d00      	cmp	r5, #0
 8003314:	da03      	bge.n	800331e <_printf_i+0x96>
 8003316:	232d      	movs	r3, #45	; 0x2d
 8003318:	9a04      	ldr	r2, [sp, #16]
 800331a:	426d      	negs	r5, r5
 800331c:	7013      	strb	r3, [r2, #0]
 800331e:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <_printf_i+0x21c>)
 8003320:	270a      	movs	r7, #10
 8003322:	9303      	str	r3, [sp, #12]
 8003324:	e01b      	b.n	800335e <_printf_i+0xd6>
 8003326:	680d      	ldr	r5, [r1, #0]
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	0641      	lsls	r1, r0, #25
 800332c:	d5f1      	bpl.n	8003312 <_printf_i+0x8a>
 800332e:	b22d      	sxth	r5, r5
 8003330:	e7ef      	b.n	8003312 <_printf_i+0x8a>
 8003332:	680d      	ldr	r5, [r1, #0]
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	1d08      	adds	r0, r1, #4
 8003338:	6018      	str	r0, [r3, #0]
 800333a:	062e      	lsls	r6, r5, #24
 800333c:	d501      	bpl.n	8003342 <_printf_i+0xba>
 800333e:	680d      	ldr	r5, [r1, #0]
 8003340:	e003      	b.n	800334a <_printf_i+0xc2>
 8003342:	066d      	lsls	r5, r5, #25
 8003344:	d5fb      	bpl.n	800333e <_printf_i+0xb6>
 8003346:	680d      	ldr	r5, [r1, #0]
 8003348:	b2ad      	uxth	r5, r5
 800334a:	4b56      	ldr	r3, [pc, #344]	; (80034a4 <_printf_i+0x21c>)
 800334c:	2708      	movs	r7, #8
 800334e:	9303      	str	r3, [sp, #12]
 8003350:	2a6f      	cmp	r2, #111	; 0x6f
 8003352:	d000      	beq.n	8003356 <_printf_i+0xce>
 8003354:	3702      	adds	r7, #2
 8003356:	0023      	movs	r3, r4
 8003358:	2200      	movs	r2, #0
 800335a:	3343      	adds	r3, #67	; 0x43
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	6863      	ldr	r3, [r4, #4]
 8003360:	60a3      	str	r3, [r4, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	db03      	blt.n	800336e <_printf_i+0xe6>
 8003366:	2204      	movs	r2, #4
 8003368:	6821      	ldr	r1, [r4, #0]
 800336a:	4391      	bics	r1, r2
 800336c:	6021      	str	r1, [r4, #0]
 800336e:	2d00      	cmp	r5, #0
 8003370:	d102      	bne.n	8003378 <_printf_i+0xf0>
 8003372:	9e04      	ldr	r6, [sp, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00c      	beq.n	8003392 <_printf_i+0x10a>
 8003378:	9e04      	ldr	r6, [sp, #16]
 800337a:	0028      	movs	r0, r5
 800337c:	0039      	movs	r1, r7
 800337e:	f7fc ff5b 	bl	8000238 <__aeabi_uidivmod>
 8003382:	9b03      	ldr	r3, [sp, #12]
 8003384:	3e01      	subs	r6, #1
 8003386:	5c5b      	ldrb	r3, [r3, r1]
 8003388:	7033      	strb	r3, [r6, #0]
 800338a:	002b      	movs	r3, r5
 800338c:	0005      	movs	r5, r0
 800338e:	429f      	cmp	r7, r3
 8003390:	d9f3      	bls.n	800337a <_printf_i+0xf2>
 8003392:	2f08      	cmp	r7, #8
 8003394:	d109      	bne.n	80033aa <_printf_i+0x122>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	07db      	lsls	r3, r3, #31
 800339a:	d506      	bpl.n	80033aa <_printf_i+0x122>
 800339c:	6863      	ldr	r3, [r4, #4]
 800339e:	6922      	ldr	r2, [r4, #16]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	dc02      	bgt.n	80033aa <_printf_i+0x122>
 80033a4:	2330      	movs	r3, #48	; 0x30
 80033a6:	3e01      	subs	r6, #1
 80033a8:	7033      	strb	r3, [r6, #0]
 80033aa:	9b04      	ldr	r3, [sp, #16]
 80033ac:	1b9b      	subs	r3, r3, r6
 80033ae:	6123      	str	r3, [r4, #16]
 80033b0:	9b07      	ldr	r3, [sp, #28]
 80033b2:	0021      	movs	r1, r4
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	9805      	ldr	r0, [sp, #20]
 80033b8:	9b06      	ldr	r3, [sp, #24]
 80033ba:	aa09      	add	r2, sp, #36	; 0x24
 80033bc:	f7ff fef4 	bl	80031a8 <_printf_common>
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d14c      	bne.n	800345e <_printf_i+0x1d6>
 80033c4:	2001      	movs	r0, #1
 80033c6:	4240      	negs	r0, r0
 80033c8:	b00b      	add	sp, #44	; 0x2c
 80033ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033cc:	3145      	adds	r1, #69	; 0x45
 80033ce:	700a      	strb	r2, [r1, #0]
 80033d0:	4a34      	ldr	r2, [pc, #208]	; (80034a4 <_printf_i+0x21c>)
 80033d2:	9203      	str	r2, [sp, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	6821      	ldr	r1, [r4, #0]
 80033d8:	ca20      	ldmia	r2!, {r5}
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	0608      	lsls	r0, r1, #24
 80033de:	d516      	bpl.n	800340e <_printf_i+0x186>
 80033e0:	07cb      	lsls	r3, r1, #31
 80033e2:	d502      	bpl.n	80033ea <_printf_i+0x162>
 80033e4:	2320      	movs	r3, #32
 80033e6:	4319      	orrs	r1, r3
 80033e8:	6021      	str	r1, [r4, #0]
 80033ea:	2710      	movs	r7, #16
 80033ec:	2d00      	cmp	r5, #0
 80033ee:	d1b2      	bne.n	8003356 <_printf_i+0xce>
 80033f0:	2320      	movs	r3, #32
 80033f2:	6822      	ldr	r2, [r4, #0]
 80033f4:	439a      	bics	r2, r3
 80033f6:	6022      	str	r2, [r4, #0]
 80033f8:	e7ad      	b.n	8003356 <_printf_i+0xce>
 80033fa:	2220      	movs	r2, #32
 80033fc:	6809      	ldr	r1, [r1, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	6022      	str	r2, [r4, #0]
 8003402:	0022      	movs	r2, r4
 8003404:	2178      	movs	r1, #120	; 0x78
 8003406:	3245      	adds	r2, #69	; 0x45
 8003408:	7011      	strb	r1, [r2, #0]
 800340a:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <_printf_i+0x220>)
 800340c:	e7e1      	b.n	80033d2 <_printf_i+0x14a>
 800340e:	0648      	lsls	r0, r1, #25
 8003410:	d5e6      	bpl.n	80033e0 <_printf_i+0x158>
 8003412:	b2ad      	uxth	r5, r5
 8003414:	e7e4      	b.n	80033e0 <_printf_i+0x158>
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	680d      	ldr	r5, [r1, #0]
 800341a:	1d10      	adds	r0, r2, #4
 800341c:	6949      	ldr	r1, [r1, #20]
 800341e:	6018      	str	r0, [r3, #0]
 8003420:	6813      	ldr	r3, [r2, #0]
 8003422:	062e      	lsls	r6, r5, #24
 8003424:	d501      	bpl.n	800342a <_printf_i+0x1a2>
 8003426:	6019      	str	r1, [r3, #0]
 8003428:	e002      	b.n	8003430 <_printf_i+0x1a8>
 800342a:	066d      	lsls	r5, r5, #25
 800342c:	d5fb      	bpl.n	8003426 <_printf_i+0x19e>
 800342e:	8019      	strh	r1, [r3, #0]
 8003430:	2300      	movs	r3, #0
 8003432:	9e04      	ldr	r6, [sp, #16]
 8003434:	6123      	str	r3, [r4, #16]
 8003436:	e7bb      	b.n	80033b0 <_printf_i+0x128>
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	1d11      	adds	r1, r2, #4
 800343c:	6019      	str	r1, [r3, #0]
 800343e:	6816      	ldr	r6, [r2, #0]
 8003440:	2100      	movs	r1, #0
 8003442:	0030      	movs	r0, r6
 8003444:	6862      	ldr	r2, [r4, #4]
 8003446:	f000 f831 	bl	80034ac <memchr>
 800344a:	2800      	cmp	r0, #0
 800344c:	d001      	beq.n	8003452 <_printf_i+0x1ca>
 800344e:	1b80      	subs	r0, r0, r6
 8003450:	6060      	str	r0, [r4, #4]
 8003452:	6863      	ldr	r3, [r4, #4]
 8003454:	6123      	str	r3, [r4, #16]
 8003456:	2300      	movs	r3, #0
 8003458:	9a04      	ldr	r2, [sp, #16]
 800345a:	7013      	strb	r3, [r2, #0]
 800345c:	e7a8      	b.n	80033b0 <_printf_i+0x128>
 800345e:	6923      	ldr	r3, [r4, #16]
 8003460:	0032      	movs	r2, r6
 8003462:	9906      	ldr	r1, [sp, #24]
 8003464:	9805      	ldr	r0, [sp, #20]
 8003466:	9d07      	ldr	r5, [sp, #28]
 8003468:	47a8      	blx	r5
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	d0aa      	beq.n	80033c4 <_printf_i+0x13c>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	079b      	lsls	r3, r3, #30
 8003472:	d415      	bmi.n	80034a0 <_printf_i+0x218>
 8003474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003476:	68e0      	ldr	r0, [r4, #12]
 8003478:	4298      	cmp	r0, r3
 800347a:	daa5      	bge.n	80033c8 <_printf_i+0x140>
 800347c:	0018      	movs	r0, r3
 800347e:	e7a3      	b.n	80033c8 <_printf_i+0x140>
 8003480:	0022      	movs	r2, r4
 8003482:	2301      	movs	r3, #1
 8003484:	9906      	ldr	r1, [sp, #24]
 8003486:	9805      	ldr	r0, [sp, #20]
 8003488:	9e07      	ldr	r6, [sp, #28]
 800348a:	3219      	adds	r2, #25
 800348c:	47b0      	blx	r6
 800348e:	1c43      	adds	r3, r0, #1
 8003490:	d098      	beq.n	80033c4 <_printf_i+0x13c>
 8003492:	3501      	adds	r5, #1
 8003494:	68e3      	ldr	r3, [r4, #12]
 8003496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	42ab      	cmp	r3, r5
 800349c:	dcf0      	bgt.n	8003480 <_printf_i+0x1f8>
 800349e:	e7e9      	b.n	8003474 <_printf_i+0x1ec>
 80034a0:	2500      	movs	r5, #0
 80034a2:	e7f7      	b.n	8003494 <_printf_i+0x20c>
 80034a4:	080038d5 	.word	0x080038d5
 80034a8:	080038e6 	.word	0x080038e6

080034ac <memchr>:
 80034ac:	b2c9      	uxtb	r1, r1
 80034ae:	1882      	adds	r2, r0, r2
 80034b0:	4290      	cmp	r0, r2
 80034b2:	d101      	bne.n	80034b8 <memchr+0xc>
 80034b4:	2000      	movs	r0, #0
 80034b6:	4770      	bx	lr
 80034b8:	7803      	ldrb	r3, [r0, #0]
 80034ba:	428b      	cmp	r3, r1
 80034bc:	d0fb      	beq.n	80034b6 <memchr+0xa>
 80034be:	3001      	adds	r0, #1
 80034c0:	e7f6      	b.n	80034b0 <memchr+0x4>

080034c2 <memcpy>:
 80034c2:	2300      	movs	r3, #0
 80034c4:	b510      	push	{r4, lr}
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d100      	bne.n	80034cc <memcpy+0xa>
 80034ca:	bd10      	pop	{r4, pc}
 80034cc:	5ccc      	ldrb	r4, [r1, r3]
 80034ce:	54c4      	strb	r4, [r0, r3]
 80034d0:	3301      	adds	r3, #1
 80034d2:	e7f8      	b.n	80034c6 <memcpy+0x4>

080034d4 <memmove>:
 80034d4:	b510      	push	{r4, lr}
 80034d6:	4288      	cmp	r0, r1
 80034d8:	d902      	bls.n	80034e0 <memmove+0xc>
 80034da:	188b      	adds	r3, r1, r2
 80034dc:	4298      	cmp	r0, r3
 80034de:	d303      	bcc.n	80034e8 <memmove+0x14>
 80034e0:	2300      	movs	r3, #0
 80034e2:	e007      	b.n	80034f4 <memmove+0x20>
 80034e4:	5c8b      	ldrb	r3, [r1, r2]
 80034e6:	5483      	strb	r3, [r0, r2]
 80034e8:	3a01      	subs	r2, #1
 80034ea:	d2fb      	bcs.n	80034e4 <memmove+0x10>
 80034ec:	bd10      	pop	{r4, pc}
 80034ee:	5ccc      	ldrb	r4, [r1, r3]
 80034f0:	54c4      	strb	r4, [r0, r3]
 80034f2:	3301      	adds	r3, #1
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d1fa      	bne.n	80034ee <memmove+0x1a>
 80034f8:	e7f8      	b.n	80034ec <memmove+0x18>
	...

080034fc <_free_r>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	0005      	movs	r5, r0
 8003500:	2900      	cmp	r1, #0
 8003502:	d010      	beq.n	8003526 <_free_r+0x2a>
 8003504:	1f0c      	subs	r4, r1, #4
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	da00      	bge.n	800350e <_free_r+0x12>
 800350c:	18e4      	adds	r4, r4, r3
 800350e:	0028      	movs	r0, r5
 8003510:	f000 f918 	bl	8003744 <__malloc_lock>
 8003514:	4a1d      	ldr	r2, [pc, #116]	; (800358c <_free_r+0x90>)
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <_free_r+0x2c>
 800351c:	6063      	str	r3, [r4, #4]
 800351e:	6014      	str	r4, [r2, #0]
 8003520:	0028      	movs	r0, r5
 8003522:	f000 f917 	bl	8003754 <__malloc_unlock>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	42a3      	cmp	r3, r4
 800352a:	d908      	bls.n	800353e <_free_r+0x42>
 800352c:	6821      	ldr	r1, [r4, #0]
 800352e:	1860      	adds	r0, r4, r1
 8003530:	4283      	cmp	r3, r0
 8003532:	d1f3      	bne.n	800351c <_free_r+0x20>
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	1841      	adds	r1, r0, r1
 800353a:	6021      	str	r1, [r4, #0]
 800353c:	e7ee      	b.n	800351c <_free_r+0x20>
 800353e:	001a      	movs	r2, r3
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <_free_r+0x4e>
 8003546:	42a3      	cmp	r3, r4
 8003548:	d9f9      	bls.n	800353e <_free_r+0x42>
 800354a:	6811      	ldr	r1, [r2, #0]
 800354c:	1850      	adds	r0, r2, r1
 800354e:	42a0      	cmp	r0, r4
 8003550:	d10b      	bne.n	800356a <_free_r+0x6e>
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	1809      	adds	r1, r1, r0
 8003556:	1850      	adds	r0, r2, r1
 8003558:	6011      	str	r1, [r2, #0]
 800355a:	4283      	cmp	r3, r0
 800355c:	d1e0      	bne.n	8003520 <_free_r+0x24>
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	1841      	adds	r1, r0, r1
 8003564:	6011      	str	r1, [r2, #0]
 8003566:	6053      	str	r3, [r2, #4]
 8003568:	e7da      	b.n	8003520 <_free_r+0x24>
 800356a:	42a0      	cmp	r0, r4
 800356c:	d902      	bls.n	8003574 <_free_r+0x78>
 800356e:	230c      	movs	r3, #12
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	e7d5      	b.n	8003520 <_free_r+0x24>
 8003574:	6821      	ldr	r1, [r4, #0]
 8003576:	1860      	adds	r0, r4, r1
 8003578:	4283      	cmp	r3, r0
 800357a:	d103      	bne.n	8003584 <_free_r+0x88>
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	1841      	adds	r1, r0, r1
 8003582:	6021      	str	r1, [r4, #0]
 8003584:	6063      	str	r3, [r4, #4]
 8003586:	6054      	str	r4, [r2, #4]
 8003588:	e7ca      	b.n	8003520 <_free_r+0x24>
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	20000164 	.word	0x20000164

08003590 <sbrk_aligned>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	4e0f      	ldr	r6, [pc, #60]	; (80035d0 <sbrk_aligned+0x40>)
 8003594:	000d      	movs	r5, r1
 8003596:	6831      	ldr	r1, [r6, #0]
 8003598:	0004      	movs	r4, r0
 800359a:	2900      	cmp	r1, #0
 800359c:	d102      	bne.n	80035a4 <sbrk_aligned+0x14>
 800359e:	f000 f8bf 	bl	8003720 <_sbrk_r>
 80035a2:	6030      	str	r0, [r6, #0]
 80035a4:	0029      	movs	r1, r5
 80035a6:	0020      	movs	r0, r4
 80035a8:	f000 f8ba 	bl	8003720 <_sbrk_r>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d00a      	beq.n	80035c6 <sbrk_aligned+0x36>
 80035b0:	2303      	movs	r3, #3
 80035b2:	1cc5      	adds	r5, r0, #3
 80035b4:	439d      	bics	r5, r3
 80035b6:	42a8      	cmp	r0, r5
 80035b8:	d007      	beq.n	80035ca <sbrk_aligned+0x3a>
 80035ba:	1a29      	subs	r1, r5, r0
 80035bc:	0020      	movs	r0, r4
 80035be:	f000 f8af 	bl	8003720 <_sbrk_r>
 80035c2:	1c43      	adds	r3, r0, #1
 80035c4:	d101      	bne.n	80035ca <sbrk_aligned+0x3a>
 80035c6:	2501      	movs	r5, #1
 80035c8:	426d      	negs	r5, r5
 80035ca:	0028      	movs	r0, r5
 80035cc:	bd70      	pop	{r4, r5, r6, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	20000168 	.word	0x20000168

080035d4 <_malloc_r>:
 80035d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035d6:	2203      	movs	r2, #3
 80035d8:	1ccb      	adds	r3, r1, #3
 80035da:	4393      	bics	r3, r2
 80035dc:	3308      	adds	r3, #8
 80035de:	0006      	movs	r6, r0
 80035e0:	001f      	movs	r7, r3
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d232      	bcs.n	800364c <_malloc_r+0x78>
 80035e6:	270c      	movs	r7, #12
 80035e8:	42b9      	cmp	r1, r7
 80035ea:	d831      	bhi.n	8003650 <_malloc_r+0x7c>
 80035ec:	0030      	movs	r0, r6
 80035ee:	f000 f8a9 	bl	8003744 <__malloc_lock>
 80035f2:	4d32      	ldr	r5, [pc, #200]	; (80036bc <_malloc_r+0xe8>)
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	001c      	movs	r4, r3
 80035f8:	2c00      	cmp	r4, #0
 80035fa:	d12e      	bne.n	800365a <_malloc_r+0x86>
 80035fc:	0039      	movs	r1, r7
 80035fe:	0030      	movs	r0, r6
 8003600:	f7ff ffc6 	bl	8003590 <sbrk_aligned>
 8003604:	0004      	movs	r4, r0
 8003606:	1c43      	adds	r3, r0, #1
 8003608:	d11e      	bne.n	8003648 <_malloc_r+0x74>
 800360a:	682c      	ldr	r4, [r5, #0]
 800360c:	0025      	movs	r5, r4
 800360e:	2d00      	cmp	r5, #0
 8003610:	d14a      	bne.n	80036a8 <_malloc_r+0xd4>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	0029      	movs	r1, r5
 8003616:	18e3      	adds	r3, r4, r3
 8003618:	0030      	movs	r0, r6
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	f000 f880 	bl	8003720 <_sbrk_r>
 8003620:	9b01      	ldr	r3, [sp, #4]
 8003622:	4283      	cmp	r3, r0
 8003624:	d143      	bne.n	80036ae <_malloc_r+0xda>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	3703      	adds	r7, #3
 800362a:	1aff      	subs	r7, r7, r3
 800362c:	2303      	movs	r3, #3
 800362e:	439f      	bics	r7, r3
 8003630:	3708      	adds	r7, #8
 8003632:	2f0c      	cmp	r7, #12
 8003634:	d200      	bcs.n	8003638 <_malloc_r+0x64>
 8003636:	270c      	movs	r7, #12
 8003638:	0039      	movs	r1, r7
 800363a:	0030      	movs	r0, r6
 800363c:	f7ff ffa8 	bl	8003590 <sbrk_aligned>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d034      	beq.n	80036ae <_malloc_r+0xda>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	19df      	adds	r7, r3, r7
 8003648:	6027      	str	r7, [r4, #0]
 800364a:	e013      	b.n	8003674 <_malloc_r+0xa0>
 800364c:	2b00      	cmp	r3, #0
 800364e:	dacb      	bge.n	80035e8 <_malloc_r+0x14>
 8003650:	230c      	movs	r3, #12
 8003652:	2500      	movs	r5, #0
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	0028      	movs	r0, r5
 8003658:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800365a:	6822      	ldr	r2, [r4, #0]
 800365c:	1bd1      	subs	r1, r2, r7
 800365e:	d420      	bmi.n	80036a2 <_malloc_r+0xce>
 8003660:	290b      	cmp	r1, #11
 8003662:	d917      	bls.n	8003694 <_malloc_r+0xc0>
 8003664:	19e2      	adds	r2, r4, r7
 8003666:	6027      	str	r7, [r4, #0]
 8003668:	42a3      	cmp	r3, r4
 800366a:	d111      	bne.n	8003690 <_malloc_r+0xbc>
 800366c:	602a      	str	r2, [r5, #0]
 800366e:	6863      	ldr	r3, [r4, #4]
 8003670:	6011      	str	r1, [r2, #0]
 8003672:	6053      	str	r3, [r2, #4]
 8003674:	0030      	movs	r0, r6
 8003676:	0025      	movs	r5, r4
 8003678:	f000 f86c 	bl	8003754 <__malloc_unlock>
 800367c:	2207      	movs	r2, #7
 800367e:	350b      	adds	r5, #11
 8003680:	1d23      	adds	r3, r4, #4
 8003682:	4395      	bics	r5, r2
 8003684:	1aea      	subs	r2, r5, r3
 8003686:	429d      	cmp	r5, r3
 8003688:	d0e5      	beq.n	8003656 <_malloc_r+0x82>
 800368a:	1b5b      	subs	r3, r3, r5
 800368c:	50a3      	str	r3, [r4, r2]
 800368e:	e7e2      	b.n	8003656 <_malloc_r+0x82>
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e7ec      	b.n	800366e <_malloc_r+0x9a>
 8003694:	6862      	ldr	r2, [r4, #4]
 8003696:	42a3      	cmp	r3, r4
 8003698:	d101      	bne.n	800369e <_malloc_r+0xca>
 800369a:	602a      	str	r2, [r5, #0]
 800369c:	e7ea      	b.n	8003674 <_malloc_r+0xa0>
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	e7e8      	b.n	8003674 <_malloc_r+0xa0>
 80036a2:	0023      	movs	r3, r4
 80036a4:	6864      	ldr	r4, [r4, #4]
 80036a6:	e7a7      	b.n	80035f8 <_malloc_r+0x24>
 80036a8:	002c      	movs	r4, r5
 80036aa:	686d      	ldr	r5, [r5, #4]
 80036ac:	e7af      	b.n	800360e <_malloc_r+0x3a>
 80036ae:	230c      	movs	r3, #12
 80036b0:	0030      	movs	r0, r6
 80036b2:	6033      	str	r3, [r6, #0]
 80036b4:	f000 f84e 	bl	8003754 <__malloc_unlock>
 80036b8:	e7cd      	b.n	8003656 <_malloc_r+0x82>
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	20000164 	.word	0x20000164

080036c0 <_realloc_r>:
 80036c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036c2:	0007      	movs	r7, r0
 80036c4:	000e      	movs	r6, r1
 80036c6:	0014      	movs	r4, r2
 80036c8:	2900      	cmp	r1, #0
 80036ca:	d105      	bne.n	80036d8 <_realloc_r+0x18>
 80036cc:	0011      	movs	r1, r2
 80036ce:	f7ff ff81 	bl	80035d4 <_malloc_r>
 80036d2:	0005      	movs	r5, r0
 80036d4:	0028      	movs	r0, r5
 80036d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036d8:	2a00      	cmp	r2, #0
 80036da:	d103      	bne.n	80036e4 <_realloc_r+0x24>
 80036dc:	f7ff ff0e 	bl	80034fc <_free_r>
 80036e0:	0025      	movs	r5, r4
 80036e2:	e7f7      	b.n	80036d4 <_realloc_r+0x14>
 80036e4:	f000 f83e 	bl	8003764 <_malloc_usable_size_r>
 80036e8:	9001      	str	r0, [sp, #4]
 80036ea:	4284      	cmp	r4, r0
 80036ec:	d803      	bhi.n	80036f6 <_realloc_r+0x36>
 80036ee:	0035      	movs	r5, r6
 80036f0:	0843      	lsrs	r3, r0, #1
 80036f2:	42a3      	cmp	r3, r4
 80036f4:	d3ee      	bcc.n	80036d4 <_realloc_r+0x14>
 80036f6:	0021      	movs	r1, r4
 80036f8:	0038      	movs	r0, r7
 80036fa:	f7ff ff6b 	bl	80035d4 <_malloc_r>
 80036fe:	1e05      	subs	r5, r0, #0
 8003700:	d0e8      	beq.n	80036d4 <_realloc_r+0x14>
 8003702:	9b01      	ldr	r3, [sp, #4]
 8003704:	0022      	movs	r2, r4
 8003706:	429c      	cmp	r4, r3
 8003708:	d900      	bls.n	800370c <_realloc_r+0x4c>
 800370a:	001a      	movs	r2, r3
 800370c:	0031      	movs	r1, r6
 800370e:	0028      	movs	r0, r5
 8003710:	f7ff fed7 	bl	80034c2 <memcpy>
 8003714:	0031      	movs	r1, r6
 8003716:	0038      	movs	r0, r7
 8003718:	f7ff fef0 	bl	80034fc <_free_r>
 800371c:	e7da      	b.n	80036d4 <_realloc_r+0x14>
	...

08003720 <_sbrk_r>:
 8003720:	2300      	movs	r3, #0
 8003722:	b570      	push	{r4, r5, r6, lr}
 8003724:	4d06      	ldr	r5, [pc, #24]	; (8003740 <_sbrk_r+0x20>)
 8003726:	0004      	movs	r4, r0
 8003728:	0008      	movs	r0, r1
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	f7fd f914 	bl	8000958 <_sbrk>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d103      	bne.n	800373c <_sbrk_r+0x1c>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d000      	beq.n	800373c <_sbrk_r+0x1c>
 800373a:	6023      	str	r3, [r4, #0]
 800373c:	bd70      	pop	{r4, r5, r6, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	2000016c 	.word	0x2000016c

08003744 <__malloc_lock>:
 8003744:	b510      	push	{r4, lr}
 8003746:	4802      	ldr	r0, [pc, #8]	; (8003750 <__malloc_lock+0xc>)
 8003748:	f000 f814 	bl	8003774 <__retarget_lock_acquire_recursive>
 800374c:	bd10      	pop	{r4, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	20000170 	.word	0x20000170

08003754 <__malloc_unlock>:
 8003754:	b510      	push	{r4, lr}
 8003756:	4802      	ldr	r0, [pc, #8]	; (8003760 <__malloc_unlock+0xc>)
 8003758:	f000 f80d 	bl	8003776 <__retarget_lock_release_recursive>
 800375c:	bd10      	pop	{r4, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	20000170 	.word	0x20000170

08003764 <_malloc_usable_size_r>:
 8003764:	1f0b      	subs	r3, r1, #4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	1f18      	subs	r0, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	da01      	bge.n	8003772 <_malloc_usable_size_r+0xe>
 800376e:	580b      	ldr	r3, [r1, r0]
 8003770:	18c0      	adds	r0, r0, r3
 8003772:	4770      	bx	lr

08003774 <__retarget_lock_acquire_recursive>:
 8003774:	4770      	bx	lr

08003776 <__retarget_lock_release_recursive>:
 8003776:	4770      	bx	lr

08003778 <_init>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr

08003784 <_fini>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr
